<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>状压入门</title>
    <link href="/%E7%8A%B6%E5%8E%8B%E5%85%A5%E9%97%A8/"/>
    <url>/%E7%8A%B6%E5%8E%8B%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="状压入门"><a href="#状压入门" class="headerlink" title="状压入门"></a>状压入门</h1><p>状压dp是dp中比较难的一种，从状压开始，后面的dp就开始区分职业选手与普通程序员了。本篇主要讲解状压dp的主要思路与部分入门题目。</p><h3 id="什么是状压？"><a href="#什么是状压？" class="headerlink" title="什么是状压？"></a>什么是状压？</h3><p>首先需要明确什么是<strong>状态压缩。</strong></p><p>状压指的是用二进制的位来描述状态，并使用位运算来处理关系的方式。</p><p>例如有一排灯，可以用1，0来描述开关灯，用位运算来进行区间修改与单点修改。</p><p>状压的思路可通过以下入门题目进一步了解。</p><h3 id="P1896-SCOI2005-互不侵犯"><a href="#P1896-SCOI2005-互不侵犯" class="headerlink" title="P1896 [SCOI2005] 互不侵犯"></a>P1896 [SCOI2005] 互不侵犯</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1896">P1896 [SCOI2005] 互不侵犯</a></p><p>首先用sit数组来模拟出一行所有可能的状态，再用数组dp[n][cnt][sum]进行枚举，其中n代表一行，cnt代表这一行的排布情况，sum代表所使用的国王数，易得转移方程为</p><p>$$<br>dp[i][j][s]+&#x3D;dp[i-1][k][s-sum[j]]<br>$$</p><p>其中i表示第i行，j表示第i行的排布，k表示第i-1行的排布，s表示已使用国王的数量。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> sit[<span class="hljs-number">2000</span>];<br><span class="hljs-type">int</span> sum1[<span class="hljs-number">2000</span>];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">int</span> n,m;<br>ll dp[<span class="hljs-number">10</span>][<span class="hljs-number">2000</span>][<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> con,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> node)</span></span>&#123;<br><span class="hljs-keyword">if</span>(node&gt;=n)&#123;<br>cnt++;<br>sit[cnt]=con;<br>sum1[cnt]=sum;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">dfs</span>(con,sum,node+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(con+(<span class="hljs-number">1</span>&lt;&lt;node),sum+<span class="hljs-number">1</span>,node+<span class="hljs-number">2</span>);<span class="hljs-comment">//排除两个连续的点均为king的情况</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//dfs出每一行可能的情况</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)dp[<span class="hljs-number">1</span>][i][sum1[i]]=<span class="hljs-number">1</span>;<span class="hljs-comment">//第一行的情况为1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=cnt;j++)&#123;<span class="hljs-comment">//对i行枚举</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++)&#123;<span class="hljs-comment">//对i-1行枚举</span><br><span class="hljs-keyword">if</span>(sit[j]&amp;sit[k])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>((sit[j]&lt;&lt;<span class="hljs-number">1</span>)&amp;sit[k])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>((sit[k]&lt;&lt;<span class="hljs-number">1</span>)&amp;sit[j])<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//排除特殊情况</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=m;s&gt;=sum1[j];s--)dp[i][j][s]+=dp[i<span class="hljs-number">-1</span>][k][s-sum1[j]];<span class="hljs-comment">//dp转移</span><br>&#125;<br>&#125;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)ans+=dp[n][i][m];<br>cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1879-USACO06NOV-Corn-Fields-G"><a href="#P1879-USACO06NOV-Corn-Fields-G" class="headerlink" title="P1879 [USACO06NOV] Corn Fields G"></a>P1879 [USACO06NOV] Corn Fields G</h3><p>题目链接：<a href="https://www.luogu.com.cn/problem/P1879">P1879 [USACO06NOV] Corn Fields G</a></p><p>和上一题的思路类似，先用一个q数组记录每一行的情况，再用一个pd数组表示状态是否存在(即是否存在左右矛盾)。在验证某个状态是否存在的时候可以取(j&amp;q[i])是否为j来验证。</p><p>使用dp[i][j]表示第i行j种状态下的种植方案数，则转移方程为：</p><pre><code class="hljs">$dp[i][j]=(dp[i-1][k]+dp[i][j])mod(MOD)$</code></pre><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br>ll MOD=<span class="hljs-number">100000000</span>;<br><span class="hljs-type">bool</span> pd[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>];<span class="hljs-comment">//存储一行可能的情况</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">14</span>][<span class="hljs-number">14</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">14</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> q[<span class="hljs-number">14</span>];<span class="hljs-comment">//存储每一行的初始情况</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp1</span><span class="hljs-params">()</span></span>&#123;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;n);j++)&#123;<br><span class="hljs-keyword">if</span>(pd[j]&amp;&amp;((j&amp;q[i])==j))&#123;<span class="hljs-comment">//检测此状态是否存在</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;(<span class="hljs-number">1</span>&lt;&lt;n);k++)&#123;<br><span class="hljs-keyword">if</span>((k&amp;j)==<span class="hljs-number">0</span>)dp[i][j]=(dp[i][j]+dp[i<span class="hljs-number">-1</span>][k])%MOD;<span class="hljs-comment">//核心步骤</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br>q[i]=(q[i]&lt;&lt;<span class="hljs-number">1</span>)+arr[i][j];<br>&#125;<br>&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)&#123;<br>pd[i]=(!(i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)))&amp;&amp;(!(i&amp;(i&gt;&gt;<span class="hljs-number">1</span>)));<span class="hljs-comment">//枚举每行所有可能的情况</span><br>&#125;<br><span class="hljs-built_in">dp1</span>();<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)ans=(dp[m][i]+ans)%MOD;<br>cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P2704-NOI2001-炮兵阵地"><a href="#P2704-NOI2001-炮兵阵地" class="headerlink" title="P2704 [NOI2001] 炮兵阵地"></a>P2704 [NOI2001] 炮兵阵地</h3><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2704">P2704 [NOI2001] 炮兵阵地</a></p><p>这道题的处理非常巧妙，先用一个arr数组记录每一行的状态（H为1，P为0），再用sum数组储存每种情况1的数量。在检测状态 j 是否与 arr[i] 矛盾时，只需要检测 j&amp;arr[i] 是否为0即可，若为0则说明可以存放，且sum[j] 即为这一行所存放的炮兵阵地的数量。dp方程即为：</p><pre><code class="hljs">$dp[i][j][k]=max(dp[[i][j][k],dp[l][i][k-1]+sum[j])$</code></pre><p>其中 i 表示处理的一行， j 表示前一行，l 表示前前行，k 表示行序。</p><p>其中有不少细节需要注意：</p><ol><li>由于是三行三行的枚举，故需要先预处理第一，二行的情况，并存放在dp数组中，再从第三行开始枚举。数据加强后专门对只有1行的情况进行了补充。</li><li>需要开滚动数组，不然会爆。</li><li>排除当前行可用 i&amp;(i&lt;&lt;1) 与 i&amp;(i&lt;&lt;2)，这样左二与右二都可以排除。</li></ol><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">150</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>][<span class="hljs-number">3</span>];<span class="hljs-comment">//滚动数组</span><br><span class="hljs-type">int</span> sum[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">//获取一行中“1”的数量</span><br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        <span class="hljs-keyword">if</span>(x&amp;<span class="hljs-number">1</span>)cnt++;<br>        x&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">char</span> index;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin&gt;&gt;index;<br>            arr[i]&lt;&lt;=<span class="hljs-number">1</span>;<br>            arr[i]+=((index==<span class="hljs-string">&#x27;H&#x27;</span>)?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<span class="hljs-comment">//H为1，P为0</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>            sum[i]=<span class="hljs-built_in">get1</span>(i);<span class="hljs-comment">//统计每一种情况中“1”的个数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//想想，为什么明明统计的是“1”的个数，sum却表示的是一行中炮兵阵地的个数？</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>        <span class="hljs-keyword">if</span>(!((i&amp;arr[<span class="hljs-number">0</span>])||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||(i&amp;(i&lt;&lt;<span class="hljs-number">2</span>))))&#123;<br>            dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=sum[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>            <span class="hljs-keyword">if</span>(!(i&amp;j||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">1</span>)||i&amp;(i&lt;&lt;<span class="hljs-number">2</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">2</span>)||i&amp;arr[<span class="hljs-number">0</span>]||j&amp;arr[<span class="hljs-number">1</span>]))&#123;<br>                dp[i][j][<span class="hljs-number">1</span>]=sum[i]+sum[j];<span class="hljs-comment">//预处理第二行</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">2</span>;k&lt;n;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&amp;arr[k<span class="hljs-number">-1</span>]||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||i&amp;(i&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举上一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>                <span class="hljs-keyword">if</span>(i&amp;j||j&amp;arr[k]||j&amp;(j&lt;&lt;<span class="hljs-number">1</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举当前行</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;(<span class="hljs-number">1</span>&lt;&lt;m);l++)&#123;<br>                    <span class="hljs-keyword">if</span>(l&amp;i||l&amp;j||l&amp;arr[k<span class="hljs-number">-2</span>]||l&amp;(l&lt;&lt;<span class="hljs-number">1</span>)||l&amp;(l&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举上上行</span><br>                    dp[i][j][k%<span class="hljs-number">3</span>]=<span class="hljs-built_in">max</span>(dp[i][j][k%<span class="hljs-number">3</span>],dp[l][i][(k<span class="hljs-number">-1</span>)%<span class="hljs-number">3</span>]+sum[j]);<span class="hljs-comment">//状态转移</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>            ans=<span class="hljs-built_in">max</span>(ans,dp[i][j][(n<span class="hljs-number">-1</span>)%<span class="hljs-number">3</span>]);<span class="hljs-comment">//计算总和</span><br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《阳光灿烂的日子》</title>
    <link href="/%E3%80%8A%E9%98%B3%E5%85%89%E7%81%BF%E7%83%82%E7%9A%84%E6%97%A5%E5%AD%90%E3%80%8B/"/>
    <url>/%E3%80%8A%E9%98%B3%E5%85%89%E7%81%BF%E7%83%82%E7%9A%84%E6%97%A5%E5%AD%90%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1>《阳光灿烂的日子》</h1><blockquote><h3 id="听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。">听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。</h3></blockquote><p>《阳光灿烂的日子》作为一部1994年的超级老电影，不管是画质还是声音处理都已落后于现代电影，不过对于我而言，这反而是一个研究老电影的好机会。</p><p>实际上，我是被电影名字所吸引的，“阳光灿烂的日子”仿佛一杯淡茶，看似平淡无味，细品却又觉有趣，特别是与原作小说的名字“动物凶猛”相比，“阳光灿烂的日子”更带有回忆的元素，这与老电影的模糊画质相符相承。</p><h2 id="模糊与清晰">模糊与清晰</h2><blockquote><h3 id="北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。">北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。</h3></blockquote><p>模糊与清晰的分界线在哪呢？正如所引，这部电影作为一部以讲述回忆为形式的电影，作者记忆的真实与模糊的分界线在哪呢？</p><p>姜文在访谈中提到，在拍摄结束后对这部片子并不满意，“应该更模糊一些，更难抓住一些”。“模糊”我认为指的是电影的情节与情感，而清晰的是“真实感”，是“阳光灿烂”的感觉。</p><p><img src="sunshine1.png" alt="剧照"></p><h2 id="阳光灿烂">阳光灿烂</h2><blockquote><h3 id="我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。">我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。</h3></blockquote><p>在所有的可描述的词中，“躁动”是我最满意的词。</p><p>电影正是描述的马小军躁动的时代，用一个儿童的青春经历去影射整个时代。在那个“北京被孩子们占领”的时代，马小军可是随心所欲地释放他的凶猛，他的情愫，因此，可能记忆会出现偏差，但“阳光灿烂”的感觉永远留在心中。</p><p>值得一提的是，马小军向米兰表白是为数不多的下雨场景，而且是暴雨。这就可见，可能那时候的日子并不总是阳光明媚，但作者的心情决定了回忆中的模样。</p><p><img src="sunshine2.png" alt="剧照"></p><h2 id="时代性与创新性">时代性与创新性</h2><p>作为一部1994年的老电影，放到今天依旧经久不衰，这足以说明这部电影一定有能代表那个时代的特性且不被时代所捆绑。</p><p>事实上，在当初那个年代，拍出这样一部电影不仅是大胆的，也是难度极大的，因为文艺片在国内的流传范围十分有限，这部电影不管是运镜还是拍摄手法，对剧情的控制，都堪称教科书，即使在当时的国内没有掀起什么水花，但他的时代意义会历久弥新。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ZJCPC部分题目</title>
    <link href="/2022ZJCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2022ZJCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1>2022ZJCPC 部分题目</h1><h3 id="G">G</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/G">2022ZJCPC G</a></p><p>要求从一点到另一点的最短时间，可转化为求一点到另一点的最短路。</p><p>只需要预处理一点到另一点的距离，分为从原点与终点出发的和从其他点出发的即可，其他点出发的会有三秒的加速。</p><p>最后求一个最短路即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">double</span> x,y;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dis</span>&#123;<br><span class="hljs-type">int</span> u;<br><span class="hljs-type">double</span> w;<br>&#125;;<br><span class="hljs-type">double</span> v1,v2;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br>node point[MAXN];<br><span class="hljs-type">int</span> vis[MAXN];<br><span class="hljs-type">double</span> dis1[MAXN];<br>vector&lt;dis&gt;arr[MAXN];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node x,<span class="hljs-keyword">struct</span> node y)</span></span>&#123;<br><span class="hljs-type">double</span> ans=<span class="hljs-built_in">pow</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y),<span class="hljs-number">0.5</span>);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">fill</span>(dis1,dis1+MAXN,<span class="hljs-number">10000000000</span>);<br>    dis1[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-number">0</span>, mind = <span class="hljs-number">1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>            <span class="hljs-keyword">if</span> (!vis[j] &amp;&amp; dis1[j] &lt; mind) u = j, mind = dis1[j];<br>            &#125;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : arr[u]) &#123;<br>            <span class="hljs-type">int</span> v = ed.u;<br>            <span class="hljs-type">double</span> w = ed.w;<br>            <span class="hljs-keyword">if</span> (dis1[v] &gt; dis1[u] + w) dis1[v] = dis1[u] + w;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+<span class="hljs-number">2</span>;i++)&#123;<br>cin&gt;&gt;point[i].x&gt;&gt;point[i].y;<br>&#125;<br>cin&gt;&gt;v1&gt;&gt;v2;<br>dis index;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=n+<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n+<span class="hljs-number">2</span>;j++)&#123;<br>index.u=j;<br>index.w=<span class="hljs-built_in">distance</span>(point[i],point[j])/v1;<br>arr[i].<span class="hljs-built_in">push_back</span>(index);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n+<span class="hljs-number">2</span>;j++)&#123;<br>index.u=j;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">distance</span>(point[i],point[j])/v2&lt;=<span class="hljs-number">3</span>)&#123;<br>index.w=<span class="hljs-built_in">distance</span>(point[i],point[j])/v2;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>index.w=<span class="hljs-number">3</span>+(<span class="hljs-built_in">distance</span>(point[i],point[j])<span class="hljs-number">-3</span>*v2)/v1;<br>&#125;<br>arr[i].<span class="hljs-built_in">push_back</span>(index);<br>&#125;<br>&#125;<br><span class="hljs-built_in">dijkstra</span>(n+<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,dis1[n+<span class="hljs-number">2</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="L">L</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/L">2022ZJCPC J</a></p><p>假设最后集合的平均数为k，则无脑选择小于等于k的数，对大于k的数从小开始取。</p><p>故对数sort后，所选择的序列必定是一个前缀。</p><p>可先确定前缀，最后用upper_bound确定大于平均数的数量。</p><p>由于是1e6数量的1e9大小的输入，需要读入优化。(因为没优化T过)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">1000005</span>];<br>ll pre[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;arr[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(arr+<span class="hljs-number">1</span>,arr+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>pre[i]=pre[i<span class="hljs-number">-1</span>]+arr[i];<br>&#125;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ll index=pre[i]/i;<br><span class="hljs-type">int</span> sum=<span class="hljs-built_in">upper_bound</span>(arr+<span class="hljs-number">1</span>,arr+i,index)-arr<span class="hljs-number">-1</span>;<br>sum=i-sum;<br>maxn=<span class="hljs-built_in">max</span>(sum,maxn);<br>&#125;<br>cout&lt;&lt;maxn;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="M">M</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/M">2022ZJCPC M</a></p><p>设中心图像（黑格包裹的白格）为x，可以统计黑白格的数量，进行解方程，解得两种图形的数量。</p><p>注意在query的时候要检测6x6的方格，而不是4x4。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">char</span> arr[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">char</span> vis[][<span class="hljs-number">7</span>]=<br>&#123;<br>    <span class="hljs-string">&quot;######&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;######&quot;</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">5</span>&gt;a||j+<span class="hljs-number">5</span>&gt;b)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;=<span class="hljs-number">5</span>;p++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;=<span class="hljs-number">5</span>;q++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i+p][j+q]!=vis[p][q])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-type">int</span> black=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> white=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> hole=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br><span class="hljs-keyword">if</span>(arr[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)black++;<br><span class="hljs-keyword">else</span> white++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">query</span>(i,j))hole++;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> x=(<span class="hljs-number">100</span>*hole-black)/<span class="hljs-number">54</span>;<br><span class="hljs-type">int</span> y=hole<span class="hljs-number">-2</span>*x;<br>cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实有更简单暴力的方法就是每次query成功后直接对(i+7 , j) (i-7 , j) (i , j-7) (i , j+7)进行query，</p><p>如果有一个成立那么x++，如果没有，那么y++。</p><p>由于x算了两次，最后x需要除2。</p><p>最后直接输出x与y。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">char</span> arr[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">char</span> vis[][<span class="hljs-number">7</span>]=<br>&#123;<br>    <span class="hljs-string">&quot;######&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;######&quot;</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">5</span>&gt;a||j+<span class="hljs-number">5</span>&gt;b)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;=<span class="hljs-number">5</span>;p++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;=<span class="hljs-number">5</span>;q++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i+p][j+q]!=vis[p][q])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">query</span>(i,j))&#123;<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">7</span>&lt;=a&amp;&amp;<span class="hljs-built_in">query</span>(i+<span class="hljs-number">7</span>,j))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i<span class="hljs-number">-7</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">query</span>(i<span class="hljs-number">-7</span>,j))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j<span class="hljs-number">-7</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">query</span>(i,j<span class="hljs-number">-7</span>))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j+<span class="hljs-number">7</span>&lt;=b&amp;&amp;<span class="hljs-built_in">query</span>(i,j+<span class="hljs-number">7</span>))x++;<br>                <span class="hljs-keyword">else</span> y++;<br>            &#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;x/<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>XCPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces941_Div1_B</title>
    <link href="/Codeforces941-Div1-B/"/>
    <url>/Codeforces941-Div1-B/</url>
    
    <content type="html"><![CDATA[<h1>Codeforces 941 Div1 B</h1><p>题目链接：<a href="https://codeforces.com/contest/1965/problem/B">Codeforces 941 Div1 B</a></p><h3 id="思路">思路</h3><p>由于a序列的大小不超过25，想到二进制讨论。</p><p>求出i为$2^i $小于等于k的最大i。</p><p>已知当a序列$ a_i $=$2^{i+1}  $时，每个数都能被表示。</p><p>故可先将a数组确定为[$1$，$2$，$4$…$2^{i-1}$，,…$2^{22}$]。</p><p>其中对$2^{i-1}$到$2^{i+1}$进行研究。</p><p>可先加入元素$k-2^i$，那么对于1到k-1，均可由1到$2^{i-1}$及$k-2^i$表示。</p><p>再加入元素$k+1$，那么对于$k+1$到$2^{i+1}+k$，均可由$k+1$与之前的元素表示（$k+1&gt;2^i$且之前的元素和最大为$k-1$，$2k&gt;=2^{i+1}$）。</p><p>最后讨论$2^{i+1}+k$，这个元素需要由$2^{i+1}$与k来表示，由于原序列中不能表示k，故需要新增元素。经过分析，当增加$k+1+2^i$时，可由$2^i+1+k$与$2^i-1$来表示。</p><p>故此时答案为[$k-2^i，k+1，k+1+2^i，1，2，4…2^{i-1}，2^{i+1}…2^{22}$]。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>ll t;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-number">1</span>&lt;&lt;i)&lt;=k)&#123;<br>i++;<br>&#125;<br>i--;<br>cout&lt;&lt;<span class="hljs-number">23</span>&lt;&lt;endl;<br>cout&lt;&lt;k+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;k-(<span class="hljs-number">1</span>&lt;&lt;i)&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">20</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j!=i)cout&lt;&lt;(<span class="hljs-number">1</span>&lt;&lt;j)&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敌对并查集</title>
    <link href="/%E6%95%8C%E5%AF%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/%E6%95%8C%E5%AF%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1>敌对并查集</h1><p>本人在OIWIKI上看并查集相关资料时没发现敌对并查集相关内容，于是写一篇专栏来记录。</p><p>题目链接：<a href="https://www.luogu.com.cn/problem/P1525">P1525关押罪犯</a></p><h3 id="思路">思路</h3><p>开两个并查集，分别对应朋友和敌人，以冲突事件影响力从大到小排序，依次放入并查集中。</p><p>具体来说，设并查集为A与B，一元素为p，p与p+n为矛盾事件（即假设p的敌人为p+n）。</p><p>放入方式是：设并查集为A与B，两矛盾为p与q。将p与q+n连接，将q与p+n连接（q与p是敌人，而p+n是p的敌人，p与q之间的矛盾是最大的，故p与q不能放同一监狱，故p与q+n，即q的敌人放同一监狱）。</p><p>当进行到要放的两矛盾已在同一监狱时，结束输出两元素的矛盾值。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> <span class="hljs-comment">//快速读入，可忽略</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>        c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>    &#123;<br>        ans = (ans &lt;&lt; <span class="hljs-number">3</span>) + (ans &lt;&lt; <span class="hljs-number">1</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>  <span class="hljs-comment">//以结构体方式保存便于排序</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>&#125; C[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(data &amp;a, data &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w &gt; b.w;<br>&#125;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">40005</span>], rank[<span class="hljs-number">40005</span>];  <span class="hljs-comment">//以下为并查集</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (fa[a] == a) ? a : (fa[a] = <span class="hljs-built_in">find</span>(fa[a]));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(a), y = <span class="hljs-built_in">find</span>(b);<br>    <span class="hljs-keyword">if</span> (rank[x] &gt;= rank[y])<br>        fa[y] = x;<br>    <span class="hljs-keyword">else</span><br>        fa[x] = y;<br>    <span class="hljs-keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y)<br>        rank[x]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        rank[i] = <span class="hljs-number">1</span>;<br>        fa[i] = i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">init</span>(n * <span class="hljs-number">2</span>); <span class="hljs-comment">//对于罪犯i，i+n为他的敌人</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        C[i].a = <span class="hljs-built_in">read</span>();<br>        C[i].b = <span class="hljs-built_in">read</span>();<br>        C[i].w = <span class="hljs-built_in">read</span>();<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(C, C + m, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(C[i].a, C[i].b))  <span class="hljs-comment">//试图把两个已经被标记为“朋友”的人标记为“敌人”</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, C[i].w); <span class="hljs-comment">//此时的怒气值就是最大怒气值的最小值</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">merge</span>(C[i].a, C[i].b + n);<br>        <span class="hljs-built_in">merge</span>(C[i].b, C[i].a + n);<br>        <span class="hljs-keyword">if</span> (i == m - <span class="hljs-number">1</span>)  <span class="hljs-comment">//如果循环结束仍无冲突，输出0</span><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2024">P2024食物链</a></p><h3 id="思路-2">思路</h3><p>题目中的元素关系为三个，分别是同级，捕食，被捕食，故可开三个并查集来对应这种关系。</p><p>开三个并查集分别是同级，捕食与被捕食。（有一点要注意，题目指出若a捕食b，b捕食c，则c捕食a）</p><p>设两元素为p，q，若遇到同级时，在三个并查集内部连接p与q，若为捕食，则连接p与q+n，p+n与q+2n，p+2n与q（p为被捕食，p+n为同级，p+2n为捕食）。</p><p>当出现矛盾时输出即可。</p><h3 id="代码-2">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">50005</span>;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">3</span>*maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> a,u,v;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>*maxn<span class="hljs-number">-3</span>;i++)&#123;<br>        fa[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(k--)&#123;<br>        cin&gt;&gt;a&gt;&gt;u&gt;&gt;v;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(u&gt;n||v&gt;n)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(u+n)==<span class="hljs-built_in">find</span>(v)||<span class="hljs-built_in">find</span>(v+n)==<span class="hljs-built_in">find</span>(u))&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fa[<span class="hljs-built_in">find</span>(u)]=<span class="hljs-built_in">find</span>(v);<br>                fa[<span class="hljs-built_in">find</span>(u+n)]=<span class="hljs-built_in">find</span>(v+n);<br>                fa[<span class="hljs-built_in">find</span>(u+<span class="hljs-number">2</span>*n)]=<span class="hljs-built_in">find</span>(v+<span class="hljs-number">2</span>*n);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(u&gt;n||v&gt;n)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(u==v)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fa[<span class="hljs-built_in">find</span>(u)]==fa[<span class="hljs-built_in">find</span>(v)]||fa[<span class="hljs-built_in">find</span>(u)]==fa[<span class="hljs-built_in">find</span>(v+n)])&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fa[<span class="hljs-built_in">find</span>(u+n)]=<span class="hljs-built_in">find</span>(v);<br>                fa[<span class="hljs-built_in">find</span>(u+<span class="hljs-number">2</span>*n)]=<span class="hljs-built_in">find</span>(v+n);<br>                fa[<span class="hljs-built_in">find</span>(u)]=<span class="hljs-built_in">find</span>(v+<span class="hljs-number">2</span>*n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022JSCPCK</title>
    <link href="/2022JSCPCK/"/>
    <url>/2022JSCPCK/</url>
    
    <content type="html"><![CDATA[<h1>2022 JSCPC K 最构造的一集</h1><p>原题链接：<a href="https://codeforces.com/gym/103743/problem/K">2022 JSCPC K</a></p><h3 id="思路">思路</h3><p>为了方便，将nunhehhe称为x。</p><p>当n=0时显然随便一个数都可以。</p><p>当n=1时只需要再原字符串上加一个a即可。</p><p>先观察规律，在x后如果补一个h，此h后面a的个数为m，那么这个h的贡献为$2^m-1$。不是$2^m$是因为最后不能为空。</p><p>补h的作用就是和x最后的作替换，从而转换为一个按位运算的问题，由cnt记录多少个$2^m-1$，然后在最后一个a前补n个h即可。</p><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt;arr;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n;<br>        string s;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;valorant&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//打瓦打的</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;nunhehheha&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(n&amp;(<span class="hljs-number">1</span>&lt;&lt;i))&#123;<br>                arr.<span class="hljs-built_in">push_back</span>(i<span class="hljs-number">-1</span>);<span class="hljs-comment">//将为1的位放入arr中</span><br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)cnt++;<span class="hljs-comment">//特判</span><br>        <span class="hljs-type">int</span> pre=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i]-pre;j++)&#123;<br>                s+=<span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//由于是从最小位开始，故应将a放h前，最后倒置</span><br>            &#125;<br>            s+=<span class="hljs-string">&#x27;h&#x27;</span>;<br>            pre=arr[i];<span class="hljs-comment">//当某位不为1时，应只输出a即可</span><br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)s+=<span class="hljs-string">&#x27;h&#x27;</span>;<br>        s+=<span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//在最后补a</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;nunhehhe&quot;</span>&lt;&lt;s&lt;&lt;endl;<br>        arr.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="碎碎念">碎碎念</h3><p>做这道题从读题，自己写，翻题解，到最终理解花了两个小时时间。</p><p>马上还有十几天就省赛了，虽然是打星队，但还是慌得一比，这种应该属于简单构造，自己还是做不好，正好又碰上蓝桥杯拉胯，感觉焦虑又无力。</p><p>唉唉，慢慢来吧。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>XCPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces940C</title>
    <link href="/Codeforces940C/"/>
    <url>/Codeforces940C/</url>
    
    <content type="html"><![CDATA[<h1>Codeforces 940 C</h1><p>首先对原棋盘进行预处理，将已经下棋的对应行删除，得到一个n*n的空白棋盘。</p><p>显然如果暴力根本过不了，那么接下来就考虑纯数学方法与dp，这里介绍一下dp。</p><p>设$dp_i$为i*i的棋盘的方案数，思考$dp_{i-1},dp_{i-2}$与$dp_i$的关系。</p><p>可对$dp_i$左上角是否为空进行讨论。</p><p>若$dp_i$左上角不为空，则左上角不为空的方案数为$dp_{i-1}$，即将$dp_{i-1}$的左上角补一个棋。</p><p>若$dp_i$左上角为空，则第一行棋子的摆放可能有n-1种，相应的，第一列的棋子摆放有n-1种。</p><p>故$dp_i=dp_{i-1}+2*(n-1)dp_{i-2}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">300005</span>;i++)&#123;<br>        dp[i]=dp[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>*(i<span class="hljs-number">-1</span>)*dp[i<span class="hljs-number">-2</span>];<br>        dp[i]%=MOD;<br>    &#125;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-keyword">if</span>(a==b)n--;<br>            <span class="hljs-keyword">else</span> n-=<span class="hljs-number">2</span>;<br>        &#125;<br>        cout&lt;&lt;dp[n]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces938E</title>
    <link href="/Codeforces938E/"/>
    <url>/Codeforces938E/</url>
    
    <content type="html"><![CDATA[<h1>Codeforces 938 E</h1><p>题目链接：<a href="https://codeforces.com/contest/1955/problem/E">Codeforces 938 E</a></p><h3 id="思路">思路</h3><p>思路是由大到小暴力枚举每个k，然后从左往右枚举，遇0则将包括0的后k位全部转变，若处理完的数列全部为0，则输出k。</p><h3 id="对算法时间复杂度的维护">对算法时间复杂度的维护</h3><p>若朴素写，时间复杂度在$n^3$，是无法通过的，故需要进行优化使其达到$n^2$。</p><p>开一个计数器cnt与记录当前位置是否发生转换的数组end。</p><p>cnt决定当前位置偏转的次数，每次发生偏转时，cnt++，而end[i+k]++代表第i位发生偏转，因为当i=i+k时，cnt会减去end[i]，使cnt始终等于对第i位数的操作次数。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br>string s;<br><span class="hljs-type">int</span> t;<br>vector&lt;<span class="hljs-type">int</span>&gt;arr;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            arr.<span class="hljs-built_in">push_back</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;index=arr;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=n;k&gt;=<span class="hljs-number">1</span>;k--)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">end</span>(n+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">fill</span>(end.<span class="hljs-built_in">begin</span>(),end.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                cnt-=end[i];<br>                <span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                    arr[i]^=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(i+k&lt;=n)&#123;<br>                        end[i+k]++;<br>                        cnt++;<br>                        arr[i]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            vector&lt;<span class="hljs-type">int</span>&gt;::iterator p=<span class="hljs-built_in">find</span>(arr.<span class="hljs-built_in">begin</span>(),arr.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(p==arr.<span class="hljs-built_in">end</span>())&#123;<br>                cout&lt;&lt;k&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> arr=index;<br>        &#125;<br>        arr.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一条测试语句</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
