<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025重庆市赛部分题目</title>
    <link href="/2025CQCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2025CQCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2025重庆市赛部分题目"><a href="#2025重庆市赛部分题目" class="headerlink" title="2025重庆市赛部分题目"></a>2025重庆市赛部分题目</h1><p>题目链接：<a href="https://codeforces.com/gym/105887">2025重庆市赛</a></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>枚举每一位，如果某一位不为0，找到1最少的一位，答案即为这一位全是1的次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,maxn=<span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">32</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin&gt;&gt;b[i];<br>        b[i+n] = b[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n*<span class="hljs-number">2</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = b[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">31</span>;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> p=x%<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>            &#123;<br>                a[j]++;<br>                x&gt;&gt;=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[j]==n*<span class="hljs-number">2</span>)<br>                &#123;<br>                    x&gt;&gt;=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                maxn=<span class="hljs-built_in">max</span>(maxn,a[j]);<br>                a[j]=<span class="hljs-number">0</span>;<br>                x&gt;&gt;=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(maxn&gt;<span class="hljs-number">0</span>)<br>        &#123;<br>            maxn-=i;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 111 110 101 100 011 010 001 </span><br></code></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>显然可以网络流建模，由 l 向 r 建 w 的边，在这个范围内建i+1到i的容量为无限大的边，求1到n的最大流。</p><p>显然无法暴力求解最大流，由最大流最小割，我们也可以求他的最小割。因为求最小割，我们需要将以一个点为边界分为两个集合，否则就要切容量为正无穷的边。当分为两个集合后，求的即为两个相邻点之间其权值的最小值。</p><p><img src="2025CQCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%5Cd__myBlog_source__posts_2025CQCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE_B.png" alt="B"></p><p>显然我们只需要维护区间加减和求区间最小值即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lt __int128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vcmp vector<span class="hljs-string">&lt;vector&lt;ll&gt;</span> &gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vec vector<span class="hljs-string">&lt;ll&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ll n, m, q;<br>ll k;<br><span class="hljs-type">const</span> ll maxn = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>, maxm = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-comment">// const ll mod = 998244353;</span><br><span class="hljs-comment">// const ll mod = 19650827;</span><br><span class="hljs-type">const</span> ll inf = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">1e7</span>+<span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Segment Tree Node</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    ll data;<br>    ll l, r;<br>    ll lazy;<br>&#125; t[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-comment">//build the segment tree</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll p, ll l, ll r)</span></span>&#123;<br>    t[p].l = l;<br>    t[p].r = r;<br>    t[p].lazy = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l == r)&#123;<br>        t[p].data = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    t[p].data = <span class="hljs-built_in">min</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].data, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].data);<br>&#125;<br><br><span class="hljs-comment">//push down the lazy tag</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(ll p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(t[p].lazy == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    t[p&lt;&lt;<span class="hljs-number">1</span>].lazy += t[p].lazy;<br>    t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].lazy += t[p].lazy;<br>    t[p&lt;&lt;<span class="hljs-number">1</span>].data += t[p].lazy;<br>    t[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].data += t[p].lazy;<br>    t[p].lazy = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_interval</span><span class="hljs-params">(ll p, ll l, ll r, ll k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r)&#123;<br>        t[p].data += k;<br>        t[p].lazy += k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p);<br>    ll mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(l &lt;= mid) <span class="hljs-built_in">add_interval</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br>    <span class="hljs-keyword">if</span>(r &gt; mid) <span class="hljs-built_in">add_interval</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, k);<br>    t[p].data = <span class="hljs-built_in">min</span>(t[p &lt;&lt; <span class="hljs-number">1</span>].data, t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].data);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll p, ll l, ll r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &lt;= t[p].l &amp;&amp; t[p].r &lt;= r) <span class="hljs-keyword">return</span> t[p].data;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    ll mid = (t[p].l + t[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    ll ans = numeric_limits&lt;ll&gt;::<span class="hljs-built_in">max</span>();<br>    <span class="hljs-keyword">if</span>(l &lt;= mid) ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span>(r &gt; mid) ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    vec a;<br>    <span class="hljs-function">vec <span class="hljs-title">l</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">r</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">c</span><span class="hljs-params">(m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        cin &gt;&gt; l[i] &gt;&gt; r[i] &gt;&gt; c[i];<br>        a.<span class="hljs-built_in">push_back</span>(l[i]);<br>        a.<span class="hljs-built_in">push_back</span>(r[i]);<br>    &#125;<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    a.<span class="hljs-built_in">push_back</span>(n);<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    ll x = <span class="hljs-built_in">unique</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>()) - a.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, x<span class="hljs-number">-1</span>);<br><br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">if</span>(l[i] == r[i]) <span class="hljs-keyword">continue</span>;<br>        ll tl = <span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">begin</span>()+x, l[i]) - a.<span class="hljs-built_in">begin</span>();<br>        ll tr = <span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">begin</span>()+x, r[i]) - a.<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-built_in">add_interval</span>(<span class="hljs-number">1</span>, tl, tr<span class="hljs-number">-1</span>, c[i]);<br>    &#125;<br>    <span class="hljs-comment">// if(lower_bound(a.begin(), a.begin()+x, n-1) == a.begin()+x) &#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; &quot;0\n&quot;;</span><br>    <span class="hljs-comment">//     return;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// for(ll i = 0; i &lt; x; i++) &#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; query(1, i, i) &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// cout &lt;&lt; &quot;\nok\n&quot;;</span><br>    cout &lt;&lt; <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, x - <span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ll t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-comment">// pre();</span><br>    <span class="hljs-comment">// scanf(&quot;%lld&quot;, &amp;t);</span><br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>显然答案的最大值为n，我们要构造答案为n的方案。</p><p>先构造一个n*n的表格，我们将[1,2], [1,3], …[1,n]放入该表格，即可使1与所有数相邻。再将[2,3],[2,4]…[2,n]放入，即可使2与所有数相邻。</p><p>一直重复该操作，直到n-1。即可使方案成立。</p><p>在vp的时候大胆guess了一下：按对角线按顺序放入1到n，答案竟然过了。</p><p>我的guess：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> p[<span class="hljs-number">2005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> mk=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>        &#123;<br>            p[i][j]=mk+<span class="hljs-number">1</span>;<br>            mk=(mk+<span class="hljs-number">1</span>)%n;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i-n+<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            p[i][j]=mk+<span class="hljs-number">1</span>;<br>            mk=(mk+<span class="hljs-number">1</span>)%n;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            cout&lt;&lt;p[j+i<span class="hljs-number">-1</span>][i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>签到题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-keyword">if</span>(a&gt;b)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Win\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(c&gt;b)<br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;WIN\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;nowin\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>首先注意到每一个repeat会使当前的结果翻倍，同时操作的次数只有2e5次，因此我们只需要用一个大小为2e5的栈去维护即可。</p><p>当栈不满的时候正常push和pop，当栈满的时候就不可能pop完，因此我们正常算即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOD 998244353</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    deque&lt;<span class="hljs-type">int</span>&gt; dq;<br>    <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        string ss;<br>        cin&gt;&gt;ss;<br>        <span class="hljs-keyword">if</span>(ss==<span class="hljs-string">&quot;Push&quot;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            <span class="hljs-keyword">if</span>(s&lt;<span class="hljs-number">2e5</span>)<br>            &#123;<br>                s++;<br>                dq.<span class="hljs-built_in">push_back</span>(x);<br>                sum=(sum+x)%MOD;<br>                cout&lt;&lt;sum&lt;&lt;endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dq.<span class="hljs-built_in">push_back</span>(x);<br>                dq.<span class="hljs-built_in">pop_front</span>();<br>                sum=(sum+x)%MOD;<br>                cout&lt;&lt;sum&lt;&lt;endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ss==<span class="hljs-string">&quot;Pop&quot;</span>)<br>        &#123;<br>            sum=(sum+MOD-dq.<span class="hljs-built_in">back</span>())%MOD;<br>            s--;<br>            dq.<span class="hljs-built_in">pop_back</span>();<br>            cout&lt;&lt;sum&lt;&lt;endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ss==<span class="hljs-string">&quot;Repeat&quot;</span>)<br>        &#123;<br>            sum=sum*<span class="hljs-number">2</span>%MOD;<br>            <span class="hljs-keyword">if</span>(s&lt;=<span class="hljs-number">1e5</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s;j++)<br>                &#123;<br>                    dq.<span class="hljs-built_in">push_back</span>(dq[j]);<br>                &#125;<br>                s*=<span class="hljs-number">2</span>;<br>                cout&lt;&lt;sum&lt;&lt;endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">2e5</span>-s);j++)<br>                &#123;<br>                    dq.<span class="hljs-built_in">push_front</span>(dq[s<span class="hljs-number">-1</span>]);<br>                &#125;<br>                s=<span class="hljs-number">2e5</span>;<br>                cout&lt;&lt;sum&lt;&lt;endl;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>只需要注意到紧贴上下界的球顺序相同即可成立。只需要画图即可明白其充分性与必要性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vec vector<span class="hljs-string">&lt;ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> vcmp vector<span class="hljs-string">&lt;vector&lt;ll&gt;</span>&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>ll n, m, k, q, h;<br><span class="hljs-type">const</span> ll maxn = <span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>, maxm = <span class="hljs-number">1e7</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1 3</span><br><span class="hljs-comment">1 2 3</span><br><span class="hljs-comment">3 2 1</span><br><span class="hljs-comment">1 0 1</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-function">vec <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">c</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-function">vec <span class="hljs-title">rid</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>cin &gt;&gt; b[i];<br>&#125;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>ll x;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span>(x != <span class="hljs-number">1</span>) &#123;<br>rid[a[i]] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>vec a2, b2, c2;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span>(!rid[a[i]]) a2.<span class="hljs-built_in">push_back</span>(a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span>(!rid[b[i]]) b2.<span class="hljs-built_in">push_back</span>(b[i]);<br>&#125;<br><br><span class="hljs-keyword">if</span>(a2.<span class="hljs-built_in">size</span>() != b2.<span class="hljs-built_in">size</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>&#125;<br><span class="hljs-type">bool</span> ok = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(ll i = <span class="hljs-number">0</span>; i &lt; a2.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span>(a2[i] != b2[i]) &#123;<br>ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(ok) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>ll T = <span class="hljs-number">1</span>;<br>cin &gt;&gt; T;<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-built_in">solve</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCPC</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Merry Christmas</title>
    <link href="/Merry-Christmas/"/>
    <url>/Merry-Christmas/</url>
    
    <content type="html"><![CDATA[<h1 id="Merry-Christmas"><a href="#Merry-Christmas" class="headerlink" title="Merry Christmas"></a>Merry Christmas</h1><p>从HK回来以后，今年也进入了尾声，回顾一年虽然吃了不少挫折但是成长也很大，所以在圣诞节写一下今年的回顾与总结。</p><p>寒假：说实话今年寒假的印象已经几乎没有了，只记得被寒假训练搞的很累，每天只能过一两个题的样子，导致最后很多没写，所幸是坚持下来了。作为基础最差的ACM队员，自己坚持下来还是觉得不可思议（笑）</p><p>春天：在春天打了第一场有意义的比赛：江苏省赛。虽然说省赛是打星参赛，不过最后还是进了铜牌区（虽然基本靠队友C）。有一说一，如果不是群里队友捞我，可能真的就要因为找不到队友放弃打A了。</p><p>暑假：暑假的大部分时间都在牛客多校，不得不说五个小时真的强度非常高，在前几场我们都是垫底的水平，不过后几场感觉好起来了，感觉虽然不如大三老登，但也不赖，主要是题的难度让人有点坐牢</p><p>网络赛：网络赛第一场打的很烂，一道比较简单的区间dp的题不会做，最后补了网络流和线性基。<br>第二场所有人都很坐牢，最后甚至靠罚时偷了个第一回来。第三场钱哥血C，但在一道绿题上死活不会做，又是倒一。</p><p>南京站：南京站应该是问题最多最爆的一次。首先是出现了网络赛从没出现的问题：没写完。这个感觉和开题顺序有很大关系。然后是后面因为心态爆炸都不说话了，导致大伙最后能多做一道却没做到。南京站也是让我清晰认识到自己的差距，因为自己犯罪了。</p><p>HK站：HK站虽然也打铁，但个人感觉是比南京站强一点的。首先是自己C了：开了签到，hack了钱哥的代码。感觉我们的问题有两点：第一是hack能力和长代码不强，对钱哥的代码看了将近四个小时才hack出来。如果能在2h内hack出来，那别的题还能再开一道。第二是如果有一道题被卡了，就没心情做别的题。说实话思想活跃起来去做构造是在K过了以后，活跃起来以后构造很快就有了思路，也就说明在K开出来之前思想是不活跃的，没有积极去解决问题的，这一点也需要改。</p><p>今年在别的方面也学到不少东西，比如hexo搭建blog，做PA（不过PA还没来得及多做），学了杂七杂八的技术。</p><p>在当部长这方面也是头一次，虽然高中也当过课代表和组长之类的，但是在当部长上还是犯了很多错，好在都是小错，自己改正也及时。在一开始选人时也是狠狠体验一把HR的感觉（乐），这也让我知道很多时候应聘不上并不是因为你真的不如别人，而是面试官真的没时间多看，筛的也比较随意。今年几次义务维修还有很多东西没教部员们，其中有一些我也很生疏，这些就明年再说吧。学生部门在我的心中应该是帮助大一学生熟悉学校，了解学校的途径，学不学的到东西不重要，开心最重要。希望明年部员能去积极当部长吧，23届有点太不积极了。</p><p>长的不期盼了，希望今年寒假能够再接再厉，狠狠加训，早点把队伍的实力提升到铜牌水平，也可以试试用黑曜石来记录一下日记。</p><p>Merry Christmas！</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024第二轮CSP-S-Color</title>
    <link href="/2024%E7%AC%AC%E4%BA%8C%E8%BD%AECSP-S-Color/"/>
    <url>/2024%E7%AC%AC%E4%BA%8C%E8%BD%AECSP-S-Color/</url>
    
    <content type="html"><![CDATA[<h1 id="2024第二轮CSP-S-color"><a href="#2024第二轮CSP-S-color" class="headerlink" title="2024第二轮CSP-S color"></a>2024第二轮CSP-S color</h1><p>题目链接：<a href="https://www.luogu.com.cn/problem/P11233">Color</a></p><p>首先想到dp</p><p>设$ f[i]$为枚举到第 i 位时得分的最大值。</p><p>先简单思考一下：</p><ol><li>当前 i-1位都没有与$ a[i]$相同的值时，$ f[i]=f[i-1]$。</li><li>当$a[i-1]=a[i]$时，要么与 i-1位同一颜色，此时$ f[i]=a[i]+f[i-2]$，要么与 i-1位不同颜色，此时$ f[i]$为$ f[i-1]$</li></ol><p>那么当与$ a[i]$相同的不在 i-1位上，而是在 j 位上呢？</p><p>此时有两种选择：</p><ol><li>左边第一个颜色相同的就是 j 。与 j 位颜色相同，且此时 i 位与 j 位间颜色一样且与 i 位颜色不同</li><li>左边第一个颜色相同的不是 j。</li></ol><p>设$ g[i][j]$为第 i 位到第 j 位颜色相同时的贡献值。</p><p>此时$ f[i]=max(f[i-1],f[j-1]+g[i][j]+a[i])$</p><p>注意：j 位为与$a[i]$相同的左侧最靠近$a[i]$的序号，易证明取左侧最靠近的最优。</p><p>由于数据范围的限制，$g[i][j]$需用前缀和处理。</p><p>由于 j 位颜色不做要求，且 j+1位定与 j 位不同，故可取$f[j+1]+pre[i-1]-pre[j+1]+a[i]$。此时$ f[i+1]$会直接决定 j 位与 j+1位的取值。</p><p>由于相等的两数可能相邻，取$f[j+1]+pre[i]-pre[j+1]+a[i]$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> il inline</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>,inf=<span class="hljs-number">2333333</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> pre[N];<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> last[M];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">fill</span>(pre,pre+<span class="hljs-number">1</span>+n,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">fill</span>(f,f+<span class="hljs-number">1</span>+n,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">fill</span>(last+<span class="hljs-number">1</span>,last+M,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">fill</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n,<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==a[i<span class="hljs-number">-1</span>])&#123;<br>pre[i]=pre[i<span class="hljs-number">-1</span>]+a[i];<br>&#125;<br><span class="hljs-keyword">else</span> pre[i]=pre[i<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>f[i]=f[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(last[a[i]]!=<span class="hljs-number">0</span>) &#123;<br>f[i]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>],f[last[a[i]]+<span class="hljs-number">1</span>]+a[i]+pre[i]-pre[last[a[i]]+<span class="hljs-number">1</span>]);<br>&#125;<br>last[a[i]]=i;<br>&#125;<br><span class="hljs-comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;f[i]&lt;&lt;&#x27; &#x27;;</span><br><span class="hljs-comment">//cout&lt;&lt;endl;</span><br>cout&lt;&lt;f[n]&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> t=<span class="hljs-number">1</span>;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br><span class="hljs-built_in">solve</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024ICPConline部分题目</title>
    <link href="/ICPConline%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/ICPConline%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2024ICPConline部分题目"><a href="#2024ICPConline部分题目" class="headerlink" title="2024ICPConline部分题目"></a>2024ICPConline部分题目</h1><h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><p>题目链接：<a href="https://codeforces.com/gym/105358/problem/L">2024ICPConline L</a></p><p>设在[1,T]的范围内，d[ i ]为数为i时的期望，此时答案为d[T]。</p><p>可以猜想得存在k，使[1,k]内的数不操作直接减更优，而[k+1,T]内的数操作更优。</p><p>由于操作纯随机，故当i&gt;k时，d[i]的值相等（因为一定会进行操作），设为x。</p><p>可由T必须操作得到方程：</p><script type="math/tex; mode=display">k/T*(k+1)/T+(T-k)/T*(x+1)=x</script><p>方程解释：因为必须操作，故有$k/T$的概率为[1,k]内的数，有$(T-k)/T$的概率得到[k+1,T]内的数。</p><p>化简得：</p><script type="math/tex; mode=display">k/2-1/2+T/k=x</script><p>由基本不等式得，当$k= \sqrt[2]{T}$时，x最小。</p><p>故当$k=\lceil \sqrt[2]{T} \rceil$或$k=\lfloor \sqrt[2]{T} \rfloor$时x取最小。</p><p>代码（队友写的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll m, ll n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n ? <span class="hljs-built_in">gcd</span>(n, m%n) : m;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">cmp</span><span class="hljs-params">(ll a,ll b,ll c,ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a*d&lt;b*c) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(a*d==b*c) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a*d&gt;b*c) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">huajian</span><span class="hljs-params">(ll &amp;a,ll &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll g = <span class="hljs-built_in">gcd</span>(a, b);<br>    a /= g;<br>    b /= g;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    ll t;<br>    cin &gt;&gt; t;<br>  <br>    ll k = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>*t);<br>    <span class="hljs-keyword">if</span>(k*k!=<span class="hljs-number">2</span>*t)<br>    &#123;<br>        ll a = k*(k<span class="hljs-number">-1</span>)+<span class="hljs-number">2</span>*t , b = <span class="hljs-number">2</span>*k, c = (k+<span class="hljs-number">1</span>)*k+<span class="hljs-number">2</span>*t , d = <span class="hljs-number">2</span>*(k+<span class="hljs-number">1</span>);  <br>        <span class="hljs-built_in">huajian</span>(a,b);<br>        <span class="hljs-built_in">huajian</span>(c,d);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(a,b,c,d)==<span class="hljs-number">-1</span>)<br>        &#123;<br>            cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ll a = k*(k<span class="hljs-number">-1</span>)+<span class="hljs-number">2</span>*t;<br>        ll b = <span class="hljs-number">2</span>*k;<br>        <span class="hljs-built_in">huajian</span>(a,b);<br>        cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ll T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCPC</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024CCPConline部分题目</title>
    <link href="/2024CCPCOnline%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2024CCPCOnline%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>题目链接：<a href="https://codeforces.com/gym/105336/attachments">2024CCPCOnline</a></p><p>看s与t均小于100，故往dp的方向想。</p><p>设$dp[i][l][r]$为s枚举到第 i 位时，以t 中（l，r）为子序列在解码中出现的次数。</p><p>则有转移方程：</p><script type="math/tex; mode=display">dp[i][l][r]=dp[i][l][r]+dp[i-1][l][k]*dp[i-1][k+1][r]</script><p>还需要考虑$s[i]$在（l，r）中出现的情况，即$t[k+1]==s[i]$时：</p><script type="math/tex; mode=display">dp[i][l][r]=dp[i][l][r]+dp[i-1][l][k]*dp[i-1][k+2][r]</script><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e2</span>+<span class="hljs-number">5</span>;<br>ll dp[N][N][N];<span class="hljs-comment">//枚举到第n位时，T的（l，r）序列在解码中出现的次数，求dp[n][1][m]</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    string s,t;<br>    cin&gt;&gt;s&gt;&gt;t;<br>    <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> m=t.<span class="hljs-built_in">size</span>();<br>    s=<span class="hljs-string">&#x27; &#x27;</span>+s;<br>    t=<span class="hljs-string">&#x27; &#x27;</span>+t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l&lt;=m+<span class="hljs-number">1</span>;l++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;l;r++)&#123;<br>                dp[i][l][r]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    ll index;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l&lt;=m;l++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=l;r&lt;=m;r++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l<span class="hljs-number">-1</span>;k&lt;=r;k++)&#123;<br>                    dp[i][l][r]=(dp[i][l][r]+dp[i<span class="hljs-number">-1</span>][l][k]*dp[i<span class="hljs-number">-1</span>][k+<span class="hljs-number">1</span>][r])%MOD;<br>                    <span class="hljs-comment">//cout&lt;&lt;dp[i-1][l][k]&lt;&lt;&#x27; &#x27;&lt;&lt;dp[i-1][k+1][r]&lt;&lt;endl;</span><br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l<span class="hljs-number">-1</span>;k&lt;r;k++)&#123;<br>                    <span class="hljs-keyword">if</span>(s[i]==t[k+<span class="hljs-number">1</span>])&#123;<br>                        dp[i][l][r]=(dp[i][l][r]+dp[i<span class="hljs-number">-1</span>][l][k]*dp[i<span class="hljs-number">-1</span>][k+<span class="hljs-number">2</span>][r])%MOD;<br>                        <span class="hljs-comment">//cout&lt;&lt;dp[i-1][l][k]&lt;&lt;&#x27; &#x27;&lt;&lt;dp[i-1][k+1][r]&lt;&lt;endl;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <br>    cout&lt;&lt;dp[n][<span class="hljs-number">1</span>][m];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin&gt;&gt;t;</span><br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><p>题目链接：<a href="https://codeforces.com/gym/105336/attachments">2024CCPCOnline</a></p><p>看到维护两个sum的异或值，想到线性基。</p><p>两数列中对应值的互换本质上是$sum \oplus a[i] \oplus b[i]$，故可对$a[i] \oplus b[i]$建立线性基。</p><p>这里需要强调一下线性基的性质：$d[i]$若不为0，第 i+1位必为1。</p><p>故有基本思路：</p><p>若(sum1&gt;&gt;i)&amp;1与(sum2&gt;&gt;i)&amp;1均为0，则continue</p><p>若(sum1&gt;&gt;i)&amp;1与(sum2&gt;&gt;i)&amp;1均为1，则sum1^d[i] , sum2^d[i]</p><p>若(sum1&gt;&gt;i)&amp;1与(sum2&gt;&gt;i)&amp;1不相等时，需要考虑前一位的。</p><ol><li>若为$\begin{matrix}1 &amp; 1\\\ 0 &amp;0\end{matrix}$需对 i 位进行处理，这样会使大的变小，小的变大</li><li>若为$\begin{matrix}1 &amp; 0\\\ 0 &amp;1\end{matrix}$我们对 i 位不处理</li><li><p>若为$\begin{matrix}1 &amp; 0\\\ 1 &amp;1\end{matrix}$或$\begin{matrix}0 &amp; 1 \\\ 0 &amp; 0\end{matrix}$我们不确定是否需要处理，那就都算一遍，取min，且不论取不取，大小关系已确定，后面的位处理时只需要无脑让大的变小即可、</p><p>代码：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">5</span>;<br>ll a[N];<br>ll b[N];<br><span class="hljs-type">int</span> n;<br>ll d[<span class="hljs-number">35</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> i,ll sum1,ll sum2)</span></span>&#123;<br>    cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;sum1&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;sum2&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ins</span><span class="hljs-params">(ll x)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">33</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-keyword">if</span>(!(x&amp;(<span class="hljs-number">1ll</span>&lt;&lt;i)))<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(d[i])x^=d[i];<span class="hljs-comment">//eliminate the 1 on the i-th bit of x</span><br><span class="hljs-keyword">else</span>&#123;d[i]=x;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//successfully inserted, jump out.</span><br>&#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,ll sum1,ll sum2)</span></span>&#123;<br>    <span class="hljs-comment">//print(i,sum1,sum2);</span><br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(sum1,sum2);<br>    <span class="hljs-type">int</span> x1=(sum1&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x2=(sum2&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x1==x2&amp;&amp;x1==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1,sum2);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x1==x2&amp;&amp;x1==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1^d[i],sum2^d[i]);<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>((sum1&gt;sum2&amp;&amp;x1==<span class="hljs-number">1</span>)||(sum2&gt;sum1)&amp;&amp;x2==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1^d[i],sum2^d[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1,sum2);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">fill</span>(d,d+<span class="hljs-number">34</span>,<span class="hljs-number">0</span>);<br>    ll sum1=<span class="hljs-number">0</span>,sum2=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        sum1^=a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;b[i];<br>        sum2^=b[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">ins</span>(a[i]^b[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">33</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-type">int</span> x1=(sum1&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> x2=(sum2&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(x1==x2&amp;&amp;x1==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x1==x2&amp;&amp;x1==<span class="hljs-number">1</span>)&#123;<br>            sum1^=d[i];<br>            sum2^=d[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> y1=(sum1&gt;&gt;(i+<span class="hljs-number">1</span>))&amp;<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> y2=(sum2&gt;&gt;(i+<span class="hljs-number">1</span>))&amp;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(y1!=y2)&#123;<br>                <span class="hljs-keyword">if</span>((y1==<span class="hljs-number">1</span>&amp;&amp;x1==<span class="hljs-number">1</span>)||(y2==<span class="hljs-number">1</span>&amp;&amp;x2==<span class="hljs-number">1</span>))&#123;<br>                    cout&lt;&lt;<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1^d[i],sum2^d[i])&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    cout&lt;&lt;<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1,sum2)&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll ans=<span class="hljs-built_in">min</span>(<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1,sum2),<span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,sum1^d[i],sum2^d[i]));<br>                cout&lt;&lt;ans&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">max</span>(sum1,sum2)&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">1</span>;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCPC</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024牛客多校2部分题目</title>
    <link href="/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A12%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2024%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A12%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2024牛客多校2部分题目"><a href="#2024牛客多校2部分题目" class="headerlink" title="2024牛客多校2部分题目"></a>2024牛客多校2部分题目</h1><h3 id="A：Floor-Tiles"><a href="#A：Floor-Tiles" class="headerlink" title="A：Floor Tiles"></a>A：Floor Tiles</h3><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/81597/A">Floor Tiles</a></p><p>首先我们需要明确，对与$ NM$的图，边缘的线头一定有$ 2(NM)$个，故曲线的最少为NM。</p><p>再考虑曲线最多的情况，显然，曲线最少时内部没有环，而曲线增多便是要在内部增加环的数量。</p><p>若要构造单位圆，显然最优为</p><script type="math/tex; mode=display">\begin{matrix}A & B  \\\\B & A  \\\\\end{matrix}</script><p>但是由于已经确定了一个位置，故可能此排放的顺序有偏差（例如左上角的位置需为B）</p><p>故若左上角为A，最多有$N+M+ \lfloor ((N-1)(M-1)+1)/2 \rfloor$</p><p>若左上角为B，最多有 $ N+M+ \lfloor ((N-1)(M-1)+1)/2 \rfloor $</p><p>构造方法为先确定左上角为A或B，再枚举环的个数，如果足够那就全填A或B，这样保证以后不会出现环。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> n,m,k;<br><span class="hljs-type">int</span> xx;<br><span class="hljs-type">int</span> yy;<br><span class="hljs-type">char</span> c;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxn</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> flag)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> ((n<span class="hljs-number">-1</span>)*(m<span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (n<span class="hljs-number">-1</span>)*(m<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    cin&gt;&gt;xx&gt;&gt;yy&gt;&gt;c;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;A&#x27;</span>)&#123;<br>        flag=(xx+yy)%<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> flag=(xx+yy+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<span class="hljs-comment">//确定左上角的选择</span><br>    <span class="hljs-type">int</span> maxn1=<span class="hljs-built_in">maxn</span>(n,m,flag);<span class="hljs-comment">//确定最多的数量</span><br>    <span class="hljs-keyword">if</span>(k&gt;maxn1+m+n||k&lt;n+m)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-type">int</span> index=k-m-n;<span class="hljs-comment">//确定环的数量</span><br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;A&#x27;</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>                <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>((xx+yy)%<span class="hljs-number">2</span>==(i+j)%<span class="hljs-number">2</span>)&#123;<br>                        cout&lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>;<br>                        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>&amp;&amp;j!=<span class="hljs-number">1</span>)index--;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27;B&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;<br>            cout&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;B&#x27;</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>                <span class="hljs-keyword">if</span>(index&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>((xx+yy+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==(i+j)%<span class="hljs-number">2</span>)&#123;<br>                        cout&lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>;<br>                        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>&amp;&amp;j!=<span class="hljs-number">1</span>)index--;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27;B&#x27;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27;B&#x27;</span>;<br>            &#125;<br>            cout&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B：Taking-Candies"><a href="#B：Taking-Candies" class="headerlink" title="B：Taking Candies"></a>B：Taking Candies</h3><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/81597/D">Taking Candies</a></p><p>从最后开始枚举，假设A在倒数第 i 回合有m个硬币，那么B就有x+y-n个硬币。</p><p>显然，B应当使A拿到的更少，自己就能拿到更多，因此B的策略可以为尽量使A拿到的少。</p><p>$dp[i][j]$为倒数第 i 回合有 j 块钱，所拿到的最多的糖果数。</p><p>显然，当$dp[i][j]&lt;dp[i+1][j-m]+val[i]$时A应花费m拿下，但是B此时应阻挠A拿下，即花费更多。</p><p>可使用二分查找到A出价的极限find，即当大于出价大于find时，A拿下不如不拿下，这样可以使B花费最多。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//#include&lt;bits/stdc++.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,x,y;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">100005</span>];<br>ll dp[<span class="hljs-number">100005</span>][<span class="hljs-number">205</span>];<span class="hljs-comment">//在倒数第i个回合，有j块钱，所拿到的最多糖果数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&gt;y;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];<br>    <span class="hljs-built_in">sort</span>(arr+<span class="hljs-number">1</span>,arr+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-comment">//cout&lt;&lt;arr[1];</span><br>    <span class="hljs-type">int</span> s=x+y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=s;j++)&#123;<br>            <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-built_in">min</span>(j,s-j);<span class="hljs-comment">//二分查找的右边界为min(j,s-j)保证find的最大值不会超过</span><br>            <span class="hljs-type">int</span> find=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<span class="hljs-comment">//二分查找</span><br>                <span class="hljs-type">int</span> mid=(r+l)&gt;&gt;<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(arr[i]+dp[i+<span class="hljs-number">1</span>][j-mid]&gt;dp[i+<span class="hljs-number">1</span>][<span class="hljs-built_in">min</span>(s,j+mid)])find=mid,l=mid+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-comment">//cout&lt;&lt;find&lt;&lt;endl;</span><br>            <span class="hljs-keyword">if</span>((arr[i]+dp[i+<span class="hljs-number">1</span>][j-find]&gt;dp[i+<span class="hljs-number">1</span>][j+find+<span class="hljs-number">1</span>])&amp;&amp;(j+find+<span class="hljs-number">1</span>&lt;=s))dp[i][j]=dp[i+<span class="hljs-number">1</span>][j+find+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">else</span> dp[i][j]=arr[i]+dp[i+<span class="hljs-number">1</span>][j-find];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[<span class="hljs-number">1</span>][x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="I：Red-Playing-Cards"><a href="#I：Red-Playing-Cards" class="headerlink" title="I：Red Playing Cards"></a>I：Red Playing Cards</h3><p>原题链接：<a href="https://ac.nowcoder.com/acm/contest/81597/I">Red Playing Cards</a></p><p>$dp[k]$为$[ l[i] , k]$的最大贡献，$f[i]$为$[l[i],r[i]]$的最大贡献。</p><p>在前后各设0，即求$f[0]$。</p><p>从大到小枚举，事实上我们需要考虑的仅有当小数包围大数的情况，这种情况我们直接将大数单独考虑即可。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6005</span>;<br><span class="hljs-type">int</span> dp[N],f[N],l[N],r[N],arr[N];<br><span class="hljs-comment">//dp[k]为[l[i],k]的最大贡献，f[i]为[l[i],r[i]]的答案</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)&#123;<br>        cin&gt;&gt;arr[i];<br>        <span class="hljs-keyword">if</span>(l[arr[i]]==<span class="hljs-number">0</span>)l[arr[i]]=i;<br>        <span class="hljs-keyword">else</span> r[arr[i]]=i;<br>    &#125;<br>    l[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    r[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>*n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-type">int</span> ll=l[i],rr=r[i];<br>        dp[ll]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=ll+<span class="hljs-number">1</span>;k&lt;=rr;k++)&#123;<br>            <span class="hljs-type">int</span> j=arr[k];<br>            <span class="hljs-keyword">if</span>(r[j]==k&amp;&amp;l[j]&gt;ll)dp[k]=<span class="hljs-built_in">max</span>(dp[k<span class="hljs-number">-1</span>]+i,dp[l[j]<span class="hljs-number">-1</span>]+f[j]);<br>            <span class="hljs-keyword">else</span> dp[k]=dp[k<span class="hljs-number">-1</span>]+i;<br>        &#125;<br>        f[i]=dp[rr];<br>    &#125;<br>    cout&lt;&lt;f[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>牛客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces954D.E</title>
    <link href="/Codeforces954D-E/"/>
    <url>/Codeforces954D-E/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-954-D-E"><a href="#Codeforces-954-D-E" class="headerlink" title="Codeforces 954 D.E"></a>Codeforces 954 D.E</h1><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>原题链接：<a href="https://codeforces.com/contest/1986/problem/D">Codeforces 954 D</a></p><p>本题算是一道分类讨论题，主要分的情况为以下几种：</p><ol><li>n为3且第二位为0的情况</li><li>n大于2且存在0的情况</li><li>其他情况</li></ol><p>当n为3且第二位为0时，只需要输出$ max(s[1]*s[3],s[1]+s[3])$即可.</p><p>当n大于2且存在0时，只需输出0即可，因为一定做得到*0。</p><p>当为其他情况时，对于“1”而言我们优先去乘，对于其他数字，我们优先去加，再除最后一位以外的每一位乘10并加上其后一位即可。</p><p>代码：(代码是cp别人的，自己写的惨不忍睹)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lowbit(x) ((x)&amp;(-x))   </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>,M=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>,mod=<span class="hljs-number">998244353</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">char</span> s[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; s + <span class="hljs-number">1</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; n &gt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">3</span> &amp;&amp; i == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-type">int</span> a = s[i<span class="hljs-number">-1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-type">int</span> b = s[i+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                cout &lt;&lt; <span class="hljs-built_in">min</span>(a * b, a + b) &lt;&lt; endl;<br>            &#125; <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;0\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cnt[s[i] - <span class="hljs-string">&#x27;0&#x27;</span>] ++;<br>    &#125;<br>    <span class="hljs-type">int</span> res = INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i ++) &#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">10</span> * (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) + s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        cnt[s[i] - <span class="hljs-string">&#x27;0&#x27;</span>] -- , cnt[s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>] --;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">9</span>; i ++) &#123;<br>            ans += cnt[i] * i;<br>        &#125;<br>        cnt[s[i] - <span class="hljs-string">&#x27;0&#x27;</span>] ++ , cnt[s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>] ++;<br>        res = <span class="hljs-built_in">min</span>(res, ans);<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> _;<br>    _ = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; _;<br>    <span class="hljs-keyword">while</span>(_ --) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>原题链接：<a href="https://codeforces.com/contest/1986/problem/E">Codeforces 954 E</a></p><p>本题也算是一道分类讨论题目。</p><p>显然，对于两个数，只有模k的余数相同时才有可能经过变换使相同，所以我们可以先根据不同的模，进行分类。</p><p>然后，对于模相同的数组，显然最小的操作方案数为先sort，再求sum(arr[i+1]-arr[i])，这时我们需要讨论的是arr数组size的奇偶性问题。</p><p>当n为偶数时，arr数组的size必须均为偶数。</p><p>当n为奇数时，必须有且只有一个size为奇数，再对为奇数的这个数组进行分类讨论那个数不选即可。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    set&lt;<span class="hljs-type">int</span>&gt;s;<br>    map&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt; &gt;arr;<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;index;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">count</span>(index))s.<span class="hljs-built_in">erase</span>(index);<br>        <span class="hljs-keyword">else</span> s.<span class="hljs-built_in">insert</span>(index);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:s)&#123;<br>        arr[i%k].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;[x,y]:arr)&#123;<br>        <span class="hljs-built_in">sort</span>(y.<span class="hljs-built_in">begin</span>(),y.<span class="hljs-built_in">end</span>());<br>    &#125;<br>    ll res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;[x,y]:arr)&#123;<br>            <span class="hljs-keyword">if</span>(y.<span class="hljs-built_in">size</span>()%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+<span class="hljs-number">1</span>&lt;y.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)&#123;<br>                res+=(y[i+<span class="hljs-number">1</span>]-y[i])/k;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> pos=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;[x,y]:arr)&#123;<br>            <span class="hljs-keyword">if</span>(y.<span class="hljs-built_in">size</span>()%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span>(pos==<span class="hljs-number">-1</span>)pos=x;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pos==<span class="hljs-number">-1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;[x,y]:arr)&#123;<br>            <span class="hljs-keyword">if</span>(x!=pos)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+<span class="hljs-number">1</span>&lt;y.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)&#123;<br>                    res+=(y[i+<span class="hljs-number">1</span>]-y[i])/k;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ll f[y.<span class="hljs-built_in">size</span>()+<span class="hljs-number">2</span>];<br>                ll g[y.<span class="hljs-built_in">size</span>()+<span class="hljs-number">2</span>];<br>                <span class="hljs-built_in">fill</span>(f,f+y.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">fill</span>(g,g+y.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+<span class="hljs-number">1</span>&lt;y.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)&#123;<br>                    f[i]+=((i<span class="hljs-number">-2</span>&gt;=<span class="hljs-number">0</span>)?f[i<span class="hljs-number">-2</span>]:<span class="hljs-number">0</span>)+(y[i+<span class="hljs-number">1</span>]-y[i])/k;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=y.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i-=<span class="hljs-number">2</span>)&#123;<br>                    g[i]+=((i+<span class="hljs-number">2</span>&lt;y.<span class="hljs-built_in">size</span>())?g[i+<span class="hljs-number">2</span>]:<span class="hljs-number">0</span>)+(y[i+<span class="hljs-number">1</span>]-y[i])/k;<br>                &#125;<span class="hljs-comment">//这是一种巧妙的在保证时间复杂度的情况下，枚举每一位是否选择的方法</span><br>                ll ans=<span class="hljs-number">1e18</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;y.<span class="hljs-built_in">size</span>();i+=<span class="hljs-number">2</span>)&#123;<br>                    ans=<span class="hljs-built_in">min</span>(ans,(i<span class="hljs-number">-2</span>&gt;=<span class="hljs-number">0</span>?f[i<span class="hljs-number">-2</span>]:<span class="hljs-number">0</span>)+(i+<span class="hljs-number">1</span>&lt;y.<span class="hljs-built_in">size</span>()?g[i+<span class="hljs-number">1</span>]:<span class="hljs-number">0</span>));<br>                &#125;<br>                res+=ans;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>状压入门</title>
    <link href="/%E7%8A%B6%E5%8E%8B%E5%85%A5%E9%97%A8/"/>
    <url>/%E7%8A%B6%E5%8E%8B%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="状压入门"><a href="#状压入门" class="headerlink" title="状压入门"></a>状压入门</h1><p>状压dp是dp中比较难的一种，从状压开始，后面的dp就开始区分职业选手与普通程序员了。本篇主要讲解状压dp的主要思路与部分入门题目。</p><h3 id="什么是状压？"><a href="#什么是状压？" class="headerlink" title="什么是状压？"></a>什么是状压？</h3><p>首先需要明确什么是<strong>状态压缩。</strong></p><p>状压指的是用二进制的位来描述状态，并使用位运算来处理关系的方式。</p><p>例如有一排灯，可以用1，0来描述开关灯，用位运算来进行区间修改与单点修改。</p><p>状压的思路可通过以下入门题目进一步了解。</p><h3 id="P1896-SCOI2005-互不侵犯"><a href="#P1896-SCOI2005-互不侵犯" class="headerlink" title="P1896 [SCOI2005] 互不侵犯"></a>P1896 [SCOI2005] 互不侵犯</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1896">P1896 [SCOI2005] 互不侵犯</a></p><p>首先用sit数组来模拟出一行所有可能的状态，再用数组dp[n][cnt][sum]进行枚举，其中n代表一行，cnt代表这一行的排布情况，sum代表所使用的国王数，易得转移方程为</p><p>$$<br>dp[i][j][s]+&#x3D;dp[i-1][k][s-sum[j]]<br>$$</p><p>其中i表示第i行，j表示第i行的排布，k表示第i-1行的排布，s表示已使用国王的数量。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> sit[<span class="hljs-number">2000</span>];<br><span class="hljs-type">int</span> sum1[<span class="hljs-number">2000</span>];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">int</span> n,m;<br>ll dp[<span class="hljs-number">10</span>][<span class="hljs-number">2000</span>][<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> con,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> node)</span></span>&#123;<br><span class="hljs-keyword">if</span>(node&gt;=n)&#123;<br>cnt++;<br>sit[cnt]=con;<br>sum1[cnt]=sum;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">dfs</span>(con,sum,node+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs</span>(con+(<span class="hljs-number">1</span>&lt;&lt;node),sum+<span class="hljs-number">1</span>,node+<span class="hljs-number">2</span>);<span class="hljs-comment">//排除两个连续的点均为king的情况</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//dfs出每一行可能的情况</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)dp[<span class="hljs-number">1</span>][i][sum1[i]]=<span class="hljs-number">1</span>;<span class="hljs-comment">//第一行的情况为1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=cnt;j++)&#123;<span class="hljs-comment">//对i行枚举</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++)&#123;<span class="hljs-comment">//对i-1行枚举</span><br><span class="hljs-keyword">if</span>(sit[j]&amp;sit[k])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>((sit[j]&lt;&lt;<span class="hljs-number">1</span>)&amp;sit[k])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>((sit[k]&lt;&lt;<span class="hljs-number">1</span>)&amp;sit[j])<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//排除特殊情况</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> s=m;s&gt;=sum1[j];s--)dp[i][j][s]+=dp[i<span class="hljs-number">-1</span>][k][s-sum1[j]];<span class="hljs-comment">//dp转移</span><br>&#125;<br>&#125;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)ans+=dp[n][i][m];<br>cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P1879-USACO06NOV-Corn-Fields-G"><a href="#P1879-USACO06NOV-Corn-Fields-G" class="headerlink" title="P1879 [USACO06NOV] Corn Fields G"></a>P1879 [USACO06NOV] Corn Fields G</h3><p>题目链接：<a href="https://www.luogu.com.cn/problem/P1879">P1879 [USACO06NOV] Corn Fields G</a></p><p>和上一题的思路类似，先用一个q数组记录每一行的情况，再用一个pd数组表示状态是否存在(即是否存在左右矛盾)。在验证某个状态是否存在的时候可以取(j&amp;q[i])是否为j来验证。</p><p>使用dp[i][j]表示第i行j种状态下的种植方案数，则转移方程为：</p><p>$$<br>dp[i][j]&#x3D;(dp[i-1][k]+dp[i][j])mod(MOD)<br>$$</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br>ll MOD=<span class="hljs-number">100000000</span>;<br><span class="hljs-type">bool</span> pd[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>];<span class="hljs-comment">//存储一行可能的情况</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">14</span>][<span class="hljs-number">14</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">14</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> q[<span class="hljs-number">14</span>];<span class="hljs-comment">//存储每一行的初始情况</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dp1</span><span class="hljs-params">()</span></span>&#123;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;n);j++)&#123;<br><span class="hljs-keyword">if</span>(pd[j]&amp;&amp;((j&amp;q[i])==j))&#123;<span class="hljs-comment">//检测此状态是否存在</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;(<span class="hljs-number">1</span>&lt;&lt;n);k++)&#123;<br><span class="hljs-keyword">if</span>((k&amp;j)==<span class="hljs-number">0</span>)dp[i][j]=(dp[i][j]+dp[i<span class="hljs-number">-1</span>][k])%MOD;<span class="hljs-comment">//核心步骤</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;m&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br>q[i]=(q[i]&lt;&lt;<span class="hljs-number">1</span>)+arr[i][j];<br>&#125;<br>&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)&#123;<br>pd[i]=(!(i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)))&amp;&amp;(!(i&amp;(i&gt;&gt;<span class="hljs-number">1</span>)));<span class="hljs-comment">//枚举每行所有可能的情况</span><br>&#125;<br><span class="hljs-built_in">dp1</span>();<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;n);i++)ans=(dp[m][i]+ans)%MOD;<br>cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="P2704-NOI2001-炮兵阵地"><a href="#P2704-NOI2001-炮兵阵地" class="headerlink" title="P2704 [NOI2001] 炮兵阵地"></a>P2704 [NOI2001] 炮兵阵地</h3><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2704">P2704 [NOI2001] 炮兵阵地</a></p><p>这道题的处理非常巧妙，先用一个arr数组记录每一行的状态（H为1，P为0），再用sum数组储存每种情况1的数量。在检测状态 j 是否与 arr[i] 矛盾时，只需要检测 j&amp;arr[i] 是否为0即可，若为0则说明可以存放，且sum[j] 即为这一行所存放的炮兵阵地的数量。dp方程即为：</p><p>$$<br>dp[i][j][k]&#x3D;max(dp[[i][j][k],dp[l][i][k-1]+sum[j])<br>$$</p><p>其中 i 表示处理的一行， j 表示前一行，l 表示前前行，k 表示行序。</p><p>其中有不少细节需要注意：</p><ol><li>由于是三行三行的枚举，故需要先预处理第一，二行的情况，并存放在dp数组中，再从第三行开始枚举。数据加强后专门对只有1行的情况进行了补充。</li><li>需要开滚动数组，不然会爆。</li><li>排除当前行可用 i&amp;(i&lt;&lt;1) 与 i&amp;(i&lt;&lt;2)，这样左二与右二都可以排除。</li></ol><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">150</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>][<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>][<span class="hljs-number">3</span>];<span class="hljs-comment">//滚动数组</span><br><span class="hljs-type">int</span> sum[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">//获取一行中“1”的数量</span><br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        <span class="hljs-keyword">if</span>(x&amp;<span class="hljs-number">1</span>)cnt++;<br>        x&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">char</span> index;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>            cin&gt;&gt;index;<br>            arr[i]&lt;&lt;=<span class="hljs-number">1</span>;<br>            arr[i]+=((index==<span class="hljs-string">&#x27;H&#x27;</span>)?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<span class="hljs-comment">//H为1，P为0</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>            sum[i]=<span class="hljs-built_in">get1</span>(i);<span class="hljs-comment">//统计每一种情况中“1”的个数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//想想，为什么明明统计的是“1”的个数，sum却表示的是一行中炮兵阵地的个数？</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>        <span class="hljs-keyword">if</span>(!((i&amp;arr[<span class="hljs-number">0</span>])||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||(i&amp;(i&lt;&lt;<span class="hljs-number">2</span>))))&#123;<br>            dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=sum[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>            <span class="hljs-keyword">if</span>(!(i&amp;j||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">1</span>)||i&amp;(i&lt;&lt;<span class="hljs-number">2</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">2</span>)||i&amp;arr[<span class="hljs-number">0</span>]||j&amp;arr[<span class="hljs-number">1</span>]))&#123;<br>                dp[i][j][<span class="hljs-number">1</span>]=sum[i]+sum[j];<span class="hljs-comment">//预处理第二行</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">2</span>;k&lt;n;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&amp;arr[k<span class="hljs-number">-1</span>]||i&amp;(i&lt;&lt;<span class="hljs-number">1</span>)||i&amp;(i&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举上一行</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>                <span class="hljs-keyword">if</span>(i&amp;j||j&amp;arr[k]||j&amp;(j&lt;&lt;<span class="hljs-number">1</span>)||j&amp;(j&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举当前行</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;(<span class="hljs-number">1</span>&lt;&lt;m);l++)&#123;<br>                    <span class="hljs-keyword">if</span>(l&amp;i||l&amp;j||l&amp;arr[k<span class="hljs-number">-2</span>]||l&amp;(l&lt;&lt;<span class="hljs-number">1</span>)||l&amp;(l&lt;&lt;<span class="hljs-number">2</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//枚举上上行</span><br>                    dp[i][j][k%<span class="hljs-number">3</span>]=<span class="hljs-built_in">max</span>(dp[i][j][k%<span class="hljs-number">3</span>],dp[l][i][(k<span class="hljs-number">-1</span>)%<span class="hljs-number">3</span>]+sum[j]);<span class="hljs-comment">//状态转移</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;(<span class="hljs-number">1</span>&lt;&lt;m);j++)&#123;<br>            ans=<span class="hljs-built_in">max</span>(ans,dp[i][j][(n<span class="hljs-number">-1</span>)%<span class="hljs-number">3</span>]);<span class="hljs-comment">//计算总和</span><br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《阳光灿烂的日子》</title>
    <link href="/%E3%80%8A%E9%98%B3%E5%85%89%E7%81%BF%E7%83%82%E7%9A%84%E6%97%A5%E5%AD%90%E3%80%8B/"/>
    <url>/%E3%80%8A%E9%98%B3%E5%85%89%E7%81%BF%E7%83%82%E7%9A%84%E6%97%A5%E5%AD%90%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="《阳光灿烂的日子》"><a href="#《阳光灿烂的日子》" class="headerlink" title="《阳光灿烂的日子》"></a>《阳光灿烂的日子》</h1><blockquote><h3 id="听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。"><a href="#听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。" class="headerlink" title="听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。"></a>听，你听，有时候一种声音或是一种味道，可以把人带回真实的过去，现在我的头脑如皎洁的月亮一般清醒。</h3></blockquote><p>《阳光灿烂的日子》作为一部1994年的超级老电影，不管是画质还是声音处理都已落后于现代电影，不过对于我而言，这反而是一个研究老电影的好机会。</p><p>实际上，我是被电影名字所吸引的，“阳光灿烂的日子”仿佛一杯淡茶，看似平淡无味，细品却又觉有趣，特别是与原作小说的名字“动物凶猛”相比，“阳光灿烂的日子”更带有回忆的元素，这与老电影的模糊画质相符相承。</p><h2 id="模糊与清晰"><a href="#模糊与清晰" class="headerlink" title="模糊与清晰"></a>模糊与清晰</h2><blockquote><h3 id="北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。"><a href="#北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。" class="headerlink" title="北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。"></a>北京，变得这么快，二十年的功夫它已经成为一个现代化城市，我几乎从中找不到任何记忆里的东西，事实上这种变化已破坏了我的记忆，使我分不清幻觉和真实。</h3></blockquote><p>模糊与清晰的分界线在哪呢？正如所引，这部电影作为一部以讲述回忆为形式的电影，作者记忆的真实与模糊的分界线在哪呢？</p><p>姜文在访谈中提到，在拍摄结束后对这部片子并不满意，“应该更模糊一些，更难抓住一些”。“模糊”我认为指的是电影的情节与情感，而清晰的是“真实感”，是“阳光灿烂”的感觉。</p><p><img src="sunshine1.png" alt="剧照"></p><h2 id="阳光灿烂"><a href="#阳光灿烂" class="headerlink" title="阳光灿烂"></a>阳光灿烂</h2><blockquote><h3 id="我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。"><a href="#我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。" class="headerlink" title="我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。"></a>我的故事总是发生在夏天，炎热的气候使人们裸露的更多，也更难以掩饰心中的欲望，那时候好像永远是夏天，太阳总是有空出来伴随着我们，阳光充足，太亮，使得眼前一阵阵发黑。</h3></blockquote><p>在所有的可描述的词中，“躁动”是我最满意的词。</p><p>电影正是描述的马小军躁动的时代，用一个儿童的青春经历去影射整个时代。在那个“北京被孩子们占领”的时代，马小军可是随心所欲地释放他的凶猛，他的情愫，因此，可能记忆会出现偏差，但“阳光灿烂”的感觉永远留在心中。</p><p>值得一提的是，马小军向米兰表白是为数不多的下雨场景，而且是暴雨。这就可见，可能那时候的日子并不总是阳光明媚，但作者的心情决定了回忆中的模样。</p><p><img src="sunshine2.png" alt="剧照"></p><h2 id="时代性与创新性"><a href="#时代性与创新性" class="headerlink" title="时代性与创新性"></a>时代性与创新性</h2><p>作为一部1994年的老电影，放到今天依旧经久不衰，这足以说明这部电影一定有能代表那个时代的特性且不被时代所捆绑。</p><p>事实上，在当初那个年代，拍出这样一部电影不仅是大胆的，也是难度极大的，因为文艺片在国内的流传范围十分有限，这部电影不管是运镜还是拍摄手法，对剧情的控制，都堪称教科书，即使在当时的国内没有掀起什么水花，但他的时代意义会历久弥新。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ZJCPC部分题目</title>
    <link href="/2022ZJCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2022ZJCPC%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2022ZJCPC-部分题目"><a href="#2022ZJCPC-部分题目" class="headerlink" title="2022ZJCPC 部分题目"></a>2022ZJCPC 部分题目</h1><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/G">2022ZJCPC G</a></p><p>要求从一点到另一点的最短时间，可转化为求一点到另一点的最短路。</p><p>只需要预处理一点到另一点的距离，分为从原点与终点出发的和从其他点出发的即可，其他点出发的会有三秒的加速。</p><p>最后求一个最短路即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">double</span> x,y;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dis</span>&#123;<br><span class="hljs-type">int</span> u;<br><span class="hljs-type">double</span> w;<br>&#125;;<br><span class="hljs-type">double</span> v1,v2;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1e3</span>+<span class="hljs-number">5</span>;<br>node point[MAXN];<br><span class="hljs-type">int</span> vis[MAXN];<br><span class="hljs-type">double</span> dis1[MAXN];<br>vector&lt;dis&gt;arr[MAXN];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> node x,<span class="hljs-keyword">struct</span> node y)</span></span>&#123;<br><span class="hljs-type">double</span> ans=<span class="hljs-built_in">pow</span>((x.x-y.x)*(x.x-y.x)+(x.y-y.y)*(x.y-y.y),<span class="hljs-number">0.5</span>);<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">fill</span>(dis1,dis1+MAXN,<span class="hljs-number">10000000000</span>);<br>    dis1[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-number">0</span>, mind = <span class="hljs-number">1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)&#123;<br>            <span class="hljs-keyword">if</span> (!vis[j] &amp;&amp; dis1[j] &lt; mind) u = j, mind = dis1[j];<br>            &#125;<br>        vis[u] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : arr[u]) &#123;<br>            <span class="hljs-type">int</span> v = ed.u;<br>            <span class="hljs-type">double</span> w = ed.w;<br>            <span class="hljs-keyword">if</span> (dis1[v] &gt; dis1[u] + w) dis1[v] = dis1[u] + w;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n+<span class="hljs-number">2</span>;i++)&#123;<br>cin&gt;&gt;point[i].x&gt;&gt;point[i].y;<br>&#125;<br>cin&gt;&gt;v1&gt;&gt;v2;<br>dis index;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=n+<span class="hljs-number">2</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n+<span class="hljs-number">2</span>;j++)&#123;<br>index.u=j;<br>index.w=<span class="hljs-built_in">distance</span>(point[i],point[j])/v1;<br>arr[i].<span class="hljs-built_in">push_back</span>(index);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n+<span class="hljs-number">2</span>;j++)&#123;<br>index.u=j;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">distance</span>(point[i],point[j])/v2&lt;=<span class="hljs-number">3</span>)&#123;<br>index.w=<span class="hljs-built_in">distance</span>(point[i],point[j])/v2;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>index.w=<span class="hljs-number">3</span>+(<span class="hljs-built_in">distance</span>(point[i],point[j])<span class="hljs-number">-3</span>*v2)/v1;<br>&#125;<br>arr[i].<span class="hljs-built_in">push_back</span>(index);<br>&#125;<br>&#125;<br><span class="hljs-built_in">dijkstra</span>(n+<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,dis1[n+<span class="hljs-number">2</span>]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/L">2022ZJCPC J</a></p><p>假设最后集合的平均数为k，则无脑选择小于等于k的数，对大于k的数从小开始取。</p><p>故对数sort后，所选择的序列必定是一个前缀。</p><p>可先确定前缀，最后用upper_bound确定大于平均数的数量。</p><p>由于是1e6数量的1e9大小的输入，需要读入优化。(因为没优化T过)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">1000005</span>];<br>ll pre[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;arr[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(arr+<span class="hljs-number">1</span>,arr+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>pre[i]=pre[i<span class="hljs-number">-1</span>]+arr[i];<br>&#125;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ll index=pre[i]/i;<br><span class="hljs-type">int</span> sum=<span class="hljs-built_in">upper_bound</span>(arr+<span class="hljs-number">1</span>,arr+i,index)-arr<span class="hljs-number">-1</span>;<br>sum=i-sum;<br>maxn=<span class="hljs-built_in">max</span>(sum,maxn);<br>&#125;<br>cout&lt;&lt;maxn;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>题目链接：<a href="https://codeforces.com/gym/103687/problem/M">2022ZJCPC M</a></p><p>设中心图像（黑格包裹的白格）为x，可以统计黑白格的数量，进行解方程，解得两种图形的数量。</p><p>注意在query的时候要检测6x6的方格，而不是4x4。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">char</span> arr[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">char</span> vis[][<span class="hljs-number">7</span>]=<br>&#123;<br>    <span class="hljs-string">&quot;######&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;######&quot;</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">5</span>&gt;a||j+<span class="hljs-number">5</span>&gt;b)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;=<span class="hljs-number">5</span>;p++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;=<span class="hljs-number">5</span>;q++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i+p][j+q]!=vis[p][q])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-type">int</span> black=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> white=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> hole=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br><span class="hljs-keyword">if</span>(arr[i][j]==<span class="hljs-string">&#x27;#&#x27;</span>)black++;<br><span class="hljs-keyword">else</span> white++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">query</span>(i,j))hole++;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> x=(<span class="hljs-number">100</span>*hole-black)/<span class="hljs-number">54</span>;<br><span class="hljs-type">int</span> y=hole<span class="hljs-number">-2</span>*x;<br>cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实有更简单暴力的方法就是每次query成功后直接对(i+7 , j) (i-7 , j) (i , j-7) (i , j+7)进行query，</p><p>如果有一个成立那么x++，如果没有，那么y++。</p><p>由于x算了两次，最后x需要除2。</p><p>最后直接输出x与y。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">char</span> arr[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">char</span> vis[][<span class="hljs-number">7</span>]=<br>&#123;<br>    <span class="hljs-string">&quot;######&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;#....#&quot;</span>,<br>    <span class="hljs-string">&quot;##..##&quot;</span>,<br>    <span class="hljs-string">&quot;######&quot;</span><br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">5</span>&gt;a||j+<span class="hljs-number">5</span>&gt;b)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;=<span class="hljs-number">5</span>;p++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;=<span class="hljs-number">5</span>;q++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i+p][j+q]!=vis[p][q])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br>cin&gt;&gt;arr[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=a;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=b;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">query</span>(i,j))&#123;<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">7</span>&lt;=a&amp;&amp;<span class="hljs-built_in">query</span>(i+<span class="hljs-number">7</span>,j))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i<span class="hljs-number">-7</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">query</span>(i<span class="hljs-number">-7</span>,j))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j<span class="hljs-number">-7</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-built_in">query</span>(i,j<span class="hljs-number">-7</span>))x++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j+<span class="hljs-number">7</span>&lt;=b&amp;&amp;<span class="hljs-built_in">query</span>(i,j+<span class="hljs-number">7</span>))x++;<br>                <span class="hljs-keyword">else</span> y++;<br>            &#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;x/<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCPC</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces941_Div1_B</title>
    <link href="/Codeforces941-Div1-B/"/>
    <url>/Codeforces941-Div1-B/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-941-Div1-B"><a href="#Codeforces-941-Div1-B" class="headerlink" title="Codeforces 941 Div1 B"></a>Codeforces 941 Div1 B</h1><p>题目链接：<a href="https://codeforces.com/contest/1965/problem/B">Codeforces 941 Div1 B</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于a序列的大小不超过25，想到二进制讨论。</p><p>求出i为$2^i $小于等于k的最大i。</p><p>已知当a序列$ a_i $=$2^{i+1}  $时，每个数都能被表示。</p><p>故可先将a数组确定为[$1$，$2$，$4$…$2^{i-1}$，,….$2^{22}$]。</p><p>其中对$2^{i-1}$到$2^{i+1}$进行研究。</p><p>可先加入元素$k-2^i$，那么对于1到k-1，均可由1到$2^{i-1}$及$k-2^i$表示。</p><p>再加入元素$k+1$，那么对于$k+1$到$2^{i+1}+k$，均可由$k+1$与之前的元素表示（$k+1&gt;2^i$且之前的元素和最大为$k-1$，$2k&gt;=2^{i+1}$）。</p><p>最后讨论$2^{i+1}+k$，这个元素需要由$2^{i+1}$与k来表示，由于原序列中不能表示k，故需要新增元素。经过分析，当增加$k+1+2^i$时，可由$2^i+1+k$与$2^i-1$来表示。</p><p>故此时答案为[$k-2^i，k+1，k+1+2^i，1，2，4…2^{i-1}，2^{i+1}…2^{22}$]。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>ll t;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-number">1</span>&lt;&lt;i)&lt;=k)&#123;<br>i++;<br>&#125;<br>i--;<br>cout&lt;&lt;<span class="hljs-number">23</span>&lt;&lt;endl;<br>cout&lt;&lt;k+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;k-(<span class="hljs-number">1</span>&lt;&lt;i)&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">20</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j!=i)cout&lt;&lt;(<span class="hljs-number">1</span>&lt;&lt;j)&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敌对并查集</title>
    <link href="/%E6%95%8C%E5%AF%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/%E6%95%8C%E5%AF%B9%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="敌对并查集"><a href="#敌对并查集" class="headerlink" title="敌对并查集"></a>敌对并查集</h1><p>本人在OIWIKI上看并查集相关资料时没发现敌对并查集相关内容，于是写一篇专栏来记录。</p><p>题目链接：<a href="https://www.luogu.com.cn/problem/P1525">P1525关押罪犯</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>开两个并查集，分别对应朋友和敌人，以冲突事件影响力从大到小排序，依次放入并查集中。</p><p>具体来说，设并查集为A与B，一元素为p，p与p+n为矛盾事件（即假设p的敌人为p+n）。</p><p>放入方式是：设并查集为A与B，两矛盾为p与q。将p与q+n连接，将q与p+n连接（q与p是敌人，而p+n是p的敌人，p与q之间的矛盾是最大的，故p与q不能放同一监狱，故p与q+n，即q的敌人放同一监狱）。</p><p>当进行到要放的两矛盾已在同一监狱时，结束输出两元素的矛盾值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> <span class="hljs-comment">//快速读入，可忽略</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>        c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>    &#123;<br>        ans = (ans &lt;&lt; <span class="hljs-number">3</span>) + (ans &lt;&lt; <span class="hljs-number">1</span>) + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>  <span class="hljs-comment">//以结构体方式保存便于排序</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br>&#125; C[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(data &amp;a, data &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w &gt; b.w;<br>&#125;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">40005</span>], rank[<span class="hljs-number">40005</span>];  <span class="hljs-comment">//以下为并查集</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (fa[a] == a) ? a : (fa[a] = <span class="hljs-built_in">find</span>(fa[a]));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">find</span>(a), y = <span class="hljs-built_in">find</span>(b);<br>    <span class="hljs-keyword">if</span> (rank[x] &gt;= rank[y])<br>        fa[y] = x;<br>    <span class="hljs-keyword">else</span><br>        fa[x] = y;<br>    <span class="hljs-keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y)<br>        rank[x]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        rank[i] = <span class="hljs-number">1</span>;<br>        fa[i] = i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">init</span>(n * <span class="hljs-number">2</span>); <span class="hljs-comment">//对于罪犯i，i+n为他的敌人</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        C[i].a = <span class="hljs-built_in">read</span>();<br>        C[i].b = <span class="hljs-built_in">read</span>();<br>        C[i].w = <span class="hljs-built_in">read</span>();<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(C, C + m, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(C[i].a, C[i].b))  <span class="hljs-comment">//试图把两个已经被标记为“朋友”的人标记为“敌人”</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, C[i].w); <span class="hljs-comment">//此时的怒气值就是最大怒气值的最小值</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">merge</span>(C[i].a, C[i].b + n);<br>        <span class="hljs-built_in">merge</span>(C[i].b, C[i].a + n);<br>        <span class="hljs-keyword">if</span> (i == m - <span class="hljs-number">1</span>)  <span class="hljs-comment">//如果循环结束仍无冲突，输出0</span><br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2024">P2024食物链</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>题目中的元素关系为三个，分别是同级，捕食，被捕食，故可开三个并查集来对应这种关系。</p><p>开三个并查集分别是同级，捕食与被捕食。（有一点要注意，题目指出若a捕食b，b捕食c，则c捕食a）</p><p>设两元素为p，q，若遇到同级时，在三个并查集内部连接p与q，若为捕食，则连接p与q+n，p+n与q+2n，p+2n与q（p为被捕食，p+n为同级，p+2n为捕食）。</p><p>当出现矛盾时输出即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">50005</span>;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">3</span>*maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<span class="hljs-keyword">return</span> fa[x];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> a,u,v;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>*maxn<span class="hljs-number">-3</span>;i++)&#123;<br>        fa[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(k--)&#123;<br>        cin&gt;&gt;a&gt;&gt;u&gt;&gt;v;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span>(u&gt;n||v&gt;n)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(u+n)==<span class="hljs-built_in">find</span>(v)||<span class="hljs-built_in">find</span>(v+n)==<span class="hljs-built_in">find</span>(u))&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fa[<span class="hljs-built_in">find</span>(u)]=<span class="hljs-built_in">find</span>(v);<br>                fa[<span class="hljs-built_in">find</span>(u+n)]=<span class="hljs-built_in">find</span>(v+n);<br>                fa[<span class="hljs-built_in">find</span>(u+<span class="hljs-number">2</span>*n)]=<span class="hljs-built_in">find</span>(v+<span class="hljs-number">2</span>*n);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(u&gt;n||v&gt;n)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(u==v)&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fa[<span class="hljs-built_in">find</span>(u)]==fa[<span class="hljs-built_in">find</span>(v)]||fa[<span class="hljs-built_in">find</span>(u)]==fa[<span class="hljs-built_in">find</span>(v+n)])&#123;<br>                ans++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                fa[<span class="hljs-built_in">find</span>(u+n)]=<span class="hljs-built_in">find</span>(v);<br>                fa[<span class="hljs-built_in">find</span>(u+<span class="hljs-number">2</span>*n)]=<span class="hljs-built_in">find</span>(v+n);<br>                fa[<span class="hljs-built_in">find</span>(u)]=<span class="hljs-built_in">find</span>(v+<span class="hljs-number">2</span>*n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022JSCPCK</title>
    <link href="/2022JSCPCK/"/>
    <url>/2022JSCPCK/</url>
    
    <content type="html"><![CDATA[<h1 id="2022-JSCPC-K-最构造的一集"><a href="#2022-JSCPC-K-最构造的一集" class="headerlink" title="2022 JSCPC K 最构造的一集"></a>2022 JSCPC K 最构造的一集</h1><p>原题链接：<a href="https://codeforces.com/gym/103743/problem/K">2022 JSCPC K</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>为了方便，将nunhehhe称为x。</p><p>当n=0时显然随便一个数都可以。</p><p>当n=1时只需要再原字符串上加一个a即可。</p><p>先观察规律，在x后如果补一个h，此h后面a的个数为m，那么这个h的贡献为$2^m-1$。不是$2^m$是因为最后不能为空。</p><p>补h的作用就是和x最后的作替换，从而转换为一个按位运算的问题，由cnt记录多少个$2^m-1$，然后在最后一个a前补n个h即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt;arr;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n;<br>        string s;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;valorant&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//打瓦打的</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;nunhehheha&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(n&amp;(<span class="hljs-number">1</span>&lt;&lt;i))&#123;<br>                arr.<span class="hljs-built_in">push_back</span>(i<span class="hljs-number">-1</span>);<span class="hljs-comment">//将为1的位放入arr中</span><br>                cnt++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)cnt++;<span class="hljs-comment">//特判</span><br>        <span class="hljs-type">int</span> pre=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i]-pre;j++)&#123;<br>                s+=<span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//由于是从最小位开始，故应将a放h前，最后倒置</span><br>            &#125;<br>            s+=<span class="hljs-string">&#x27;h&#x27;</span>;<br>            pre=arr[i];<span class="hljs-comment">//当某位不为1时，应只输出a即可</span><br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)s+=<span class="hljs-string">&#x27;h&#x27;</span>;<br>        s+=<span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">//在最后补a</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;nunhehhe&quot;</span>&lt;&lt;s&lt;&lt;endl;<br>        arr.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>做这道题从读题，自己写，翻题解，到最终理解花了两个小时时间。</p><p>马上还有十几天就省赛了，虽然是打星队，但还是慌得一比，这种应该属于简单构造，自己还是做不好，正好又碰上蓝桥杯拉胯，感觉焦虑又无力。</p><p>唉唉，慢慢来吧。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XCPC</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces940C</title>
    <link href="/Codeforces940C/"/>
    <url>/Codeforces940C/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-940-C"><a href="#Codeforces-940-C" class="headerlink" title="Codeforces 940 C"></a>Codeforces 940 C</h1><p>首先对原棋盘进行预处理，将已经下棋的对应行删除，得到一个n*n的空白棋盘。</p><p>显然如果暴力根本过不了，那么接下来就考虑纯数学方法与dp，这里介绍一下dp。</p><p>设$dp_i$为i*i的棋盘的方案数，思考$dp_{i-1},dp_{i-2}$与$dp_i$的关系。</p><p>可对$dp_i$左上角是否为空进行讨论。</p><p>若$dp_i$左上角不为空，则左上角不为空的方案数为$dp_{i-1}$，即将$dp_{i-1}$的左上角补一个棋。</p><p>若$dp_i$左上角为空，则第一行棋子的摆放可能有n-1种，相应的，第一列的棋子摆放有n-1种。</p><p>故$dp_i=dp_{i-1}+2*(n-1)dp_{i-2}$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">300005</span>;i++)&#123;<br>        dp[i]=dp[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>*(i<span class="hljs-number">-1</span>)*dp[i<span class="hljs-number">-2</span>];<br>        dp[i]%=MOD;<br>    &#125;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-keyword">if</span>(a==b)n--;<br>            <span class="hljs-keyword">else</span> n-=<span class="hljs-number">2</span>;<br>        &#125;<br>        cout&lt;&lt;dp[n]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces938E</title>
    <link href="/Codeforces938E/"/>
    <url>/Codeforces938E/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-938-E"><a href="#Codeforces-938-E" class="headerlink" title="Codeforces 938 E"></a>Codeforces 938 E</h1><p>题目链接：<a href="https://codeforces.com/contest/1955/problem/E">Codeforces 938 E</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>思路是由大到小暴力枚举每个k，然后从左往右枚举，遇0则将包括0的后k位全部转变，若处理完的数列全部为0，则输出k。</p><h3 id="对算法时间复杂度的维护"><a href="#对算法时间复杂度的维护" class="headerlink" title="对算法时间复杂度的维护"></a>对算法时间复杂度的维护</h3><p>若朴素写，时间复杂度在$n^3$，是无法通过的，故需要进行优化使其达到$n^2$。</p><p>开一个计数器cnt与记录当前位置是否发生转换的数组end。</p><p>cnt决定当前位置偏转的次数，每次发生偏转时，cnt++，而end[i+k]++代表第i位发生偏转，因为当i=i+k时，cnt会减去end[i]，使cnt始终等于对第i位数的操作次数。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br>string s;<br><span class="hljs-type">int</span> t;<br>vector&lt;<span class="hljs-type">int</span>&gt;arr;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            arr.<span class="hljs-built_in">push_back</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;index=arr;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=n;k&gt;=<span class="hljs-number">1</span>;k--)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">end</span>(n+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">fill</span>(end.<span class="hljs-built_in">begin</span>(),end.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                cnt-=end[i];<br>                <span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                    arr[i]^=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(i+k&lt;=n)&#123;<br>                        end[i+k]++;<br>                        cnt++;<br>                        arr[i]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            vector&lt;<span class="hljs-type">int</span>&gt;::iterator p=<span class="hljs-built_in">find</span>(arr.<span class="hljs-built_in">begin</span>(),arr.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(p==arr.<span class="hljs-built_in">end</span>())&#123;<br>                cout&lt;&lt;k&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> arr=index;<br>        &#125;<br>        arr.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一条测试语句</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
