<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Codeforces940C</title>
    <link href="/2024/04/27/Codeforces940C/"/>
    <url>/2024/04/27/Codeforces940C/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-940-C"><a href="#Codeforces-940-C" class="headerlink" title="Codeforces 940 C"></a>Codeforces 940 C</h1><p>首先对原棋盘进行预处理，将已经下棋的对应行删除，得到一个n*n的空白棋盘。</p><p>显然如果暴力根本过不了，那么接下来就考虑纯数学方法与dp，这里介绍一下dp。</p><p>设dp[i]为i*i的棋盘的方案数，思考dp[i-1],dp[i-2]与dp[i]的关系。</p><p>可对dp[i]左上角是否为空进行讨论。</p><p>若dp[i]左上角不为空，则左上角不为空的方案数为dp[i-1]，即将dp[i-1]的左上角补一个棋。</p><p>若dp[i]左上角为空，则第一行棋子的摆放可能有n-1种，相应的，第一列的棋子摆放有n-1种。</p><p>故dp[i]&#x3D;dp[i-1]+2*(n-1)dp[i-2]。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">300005</span>;i++)&#123;<br>        dp[i]=dp[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>*(i<span class="hljs-number">-1</span>)*dp[i<span class="hljs-number">-2</span>];<br>        dp[i]%=MOD;<br>    &#125;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-keyword">if</span>(a==b)n--;<br>            <span class="hljs-keyword">else</span> n-=<span class="hljs-number">2</span>;<br>        &#125;<br>        cout&lt;&lt;dp[n]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces938E</title>
    <link href="/2024/04/27/Codeforces938E/"/>
    <url>/2024/04/27/Codeforces938E/</url>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-938-E"><a href="#Codeforces-938-E" class="headerlink" title="Codeforces 938 E"></a>Codeforces 938 E</h1><p>题目链接：<a href="https://codeforces.com/contest/1955/problem/E">Codeforces 938 E</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>思路是由大到小暴力枚举每个k，然后从左往右枚举，遇0则将包括0的后k位全部转变，若处理完的数列全部为0，则输出k。</p><h3 id="对算法时间复杂度的维护"><a href="#对算法时间复杂度的维护" class="headerlink" title="对算法时间复杂度的维护"></a>对算法时间复杂度的维护</h3><p>若朴素写，时间复杂度在n^3，是无法通过的，故需要进行优化使其达到n^2。</p><p>开一个计数器cnt与记录当前位置是否发生转换的数组end。</p><p>cnt决定当前位置偏转的次数，每次发生偏转时，cnt++，而end[i+k]++代表第i位发生偏转，因为当i&#x3D;i+k时，cnt会减去end[i]，使cnt始终等于对第i位数的操作次数。</p><p>代码如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br>string s;<br><span class="hljs-type">int</span> t;<br>vector&lt;<span class="hljs-type">int</span>&gt;arr;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        cin&gt;&gt;n&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            arr.<span class="hljs-built_in">push_back</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;index=arr;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=n;k&gt;=<span class="hljs-number">1</span>;k--)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">end</span>(n+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">fill</span>(end.<span class="hljs-built_in">begin</span>(),end.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                cnt-=end[i];<br>                <span class="hljs-keyword">if</span>(cnt%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                    arr[i]^=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(i+k&lt;=n)&#123;<br>                        end[i+k]++;<br>                        cnt++;<br>                        arr[i]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            vector&lt;<span class="hljs-type">int</span>&gt;::iterator p=<span class="hljs-built_in">find</span>(arr.<span class="hljs-built_in">begin</span>(),arr.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(p==arr.<span class="hljs-built_in">end</span>())&#123;<br>                cout&lt;&lt;k&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> arr=index;<br>        &#125;<br>        arr.<span class="hljs-built_in">clear</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/31/hello-world/"/>
    <url>/2024/03/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>这是一条测试语句</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
